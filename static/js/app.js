(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _injectTapEventPlugin = require('react-tap-event-plugin');

var _injectTapEventPlugin2 = _interopRequireWildcard(_injectTapEventPlugin);

var _Header = require('./components/header');

var _Header2 = _interopRequireWildcard(_Header);

var _Bodys = require('./components/bodys');

var _Bodys2 = _interopRequireWildcard(_Bodys);

_injectTapEventPlugin2['default']();

var App = (function (_Component) {
    function App(props) {
        _classCallCheck(this, App);

        _get(Object.getPrototypeOf(App.prototype), 'constructor', this).call(this, props);
        this.state = {
            initdata: {
                rowData: window.localStorage.rowData ? JSON.parse(window.localStorage.rowData) : [],
                inputData: [{
                    type: 'text',
                    values: '例：后台项目',
                    text: '项目'
                }, {
                    type: 'text',
                    values: 'A',
                    text: '子任务'
                }, {
                    type: 'text',
                    values: 'A',
                    text: '优先'
                }, {
                    type: 'text',
                    values: '7/20',
                    text: '开发'
                }, {
                    type: 'text',
                    values: '12/12',
                    text: '测试'
                }, {
                    type: 'text',
                    values: '12/12',
                    text: '上线'
                }, {
                    type: 'text',
                    values: '小a',
                    text: '技术人'
                }, {
                    type: 'text',
                    values: '小b',
                    text: 'QA'
                }, {
                    type: 'text',
                    values: '小s',
                    text: '产品'
                }, {
                    type: 'textarea',
                    values: 'delay了',
                    text: '备注'
                }]
            }
        };
    }

    _inherits(App, _Component);

    _createClass(App, [{
        key: 'render',
        value: function render() {
            return _React$Component2['default'].createElement(
                'div',
                null,
                _React$Component2['default'].createElement(_Header2['default'], null),
                _React$Component2['default'].createElement(
                    'div',
                    { className: 'bodys' },
                    _React$Component2['default'].createElement(_Bodys2['default'], { init: this.state.initdata })
                )
            );
        }
    }]);

    return App;
})(_React$Component.Component);

_React$Component2['default'].render(_React$Component2['default'].createElement(App, null), document.getElementById('root'));


},{"./components/bodys":2,"./components/header":4,"react-tap-event-plugin":"react-tap-event-plugin","react/addons":"react/addons"}],2:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _RaisedButton = require('material-ui');

var _Forms = require('./forms');

var _Forms2 = _interopRequireWildcard(_Forms);

var _Trs = require('./trs');

var _Trs2 = _interopRequireWildcard(_Trs);

var Bodys = (function (_Component) {
    function Bodys(props) {
        _classCallCheck(this, Bodys);

        _get(Object.getPrototypeOf(Bodys.prototype), 'constructor', this).call(this, props);
        this.state = this.props.init;
    }

    _inherits(Bodys, _Component);

    _createClass(Bodys, [{
        key: 'render',
        value: function render() {

            var _forms = _React$Component2['default'].createElement(_Forms2['default'], { inputs: this.state.inputData });
            var forms = _React$Component2['default'].addons.cloneWithProps(_forms, {
                isSelected: this.state.isSelected,
                handleSubmit: this.handleSubmit.bind(this),
                handleChange: this.handleChange.bind(this)
            });

            var theads = this.state.inputData.slice(0);
            theads.push({ text: '操作' });
            var thead = theads.map(function (item, i) {
                return _React$Component2['default'].createElement(
                    'th',
                    { key: i },
                    item.text
                );
            });

            var items_trs = this.state.rowData.map(function (item, i) {
                item.id = i;
                return _React$Component2['default'].createElement(_Trs2['default'], { key: i, item: item });
            });

            var items = items_trs.map(function (item, i) {
                return _React$Component2['default'].addons.cloneWithProps(item, {
                    isSelected: this.state.isSelected,
                    selectItem: this.selectItem.bind(this),
                    deleteItem: this.deleteItem.bind(this)
                });
            }, this);

            return _React$Component2['default'].createElement(
                'div',
                { className: 'user-detail' },
                forms,
                _React$Component2['default'].createElement(
                    'div',
                    { className: 'tableDiv' },
                    _React$Component2['default'].createElement(
                        'table',
                        { className: 'uk-table uk-table-striped uk-text-left' },
                        _React$Component2['default'].createElement(
                            'thead',
                            null,
                            _React$Component2['default'].createElement(
                                'tr',
                                null,
                                thead
                            )
                        ),
                        _React$Component2['default'].createElement(
                            'tbody',
                            null,
                            items
                        )
                    ),
                    _React$Component2['default'].createElement(
                        'div',
                        { className: 'export' },
                        _React$Component2['default'].createElement(_RaisedButton.RaisedButton, { label: '导出为table', primary: true, onClick: this.save.bind(this) })
                    )
                )
            );
        }
    }, {
        key: 'selectItem',

        // <pre><code>{JSON.stringify(this.state.rowData, null, '\t')}</code></pre>
        // <div><RaisedButton label='保存到 localstorage' primary={true} onClick={this.save.bind(this)} /></div>
        value: function selectItem(item, event) {
            var _inputs = this.state.inputData.slice(0);
            _inputs[0].values = item.props.item.proj;
            _inputs[1].values = item.props.item.subproj;
            _inputs[2].values = item.props.item.priority;
            _inputs[3].values = item.props.item.tech_t;
            _inputs[4].values = item.props.item.qa_t;
            _inputs[5].values = item.props.item.pub;
            _inputs[6].values = item.props.item.leader;
            _inputs[7].values = item.props.item.qa;
            _inputs[8].values = item.props.item.prod;
            _inputs[9].values = item.props.item.note;
            var _isSelected = item.props.item.id === item.props.isSelected ? false : item.props.item.id;
            if (typeof _isSelected === 'number') {
                this.setState({
                    inputData: _inputs,
                    isSelected: _isSelected
                });
            } else {
                this.setState({
                    isSelected: _isSelected
                });
            }
        }
    }, {
        key: 'deleteItem',
        value: function deleteItem(item, event) {
            event.stopPropagation();
            var _items = this.state.rowData;
            _items.splice(item.props.item.id, 1);
            this.setState({ rowData: _items });
            window.localStorage.rowData = JSON.stringify(this.state.rowData);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e, item) {
            var index = Array.prototype.slice.call(e.target.parentNode.parentNode.childNodes).indexOf(e.target.parentNode);
            var _inputs = this.state.inputData.slice(0);
            _inputs[index].values = e.target.value;
            this.setState({ inputData: _inputs });
        }
    }, {
        key: 'handleSubmit',
        value: function handleSubmit(e, forms) {

            e.preventDefault();

            var list = document.querySelector('.contents').querySelectorAll('input');

            // var error = false;

            // Array.prototype.forEach.call(list, function( item ){
            //     if ( item ) {
            //         if ( !item.value ) {
            //             alert('Value should\'n be empty');
            //             error = true;
            //         }
            //     }
            // });

            // if ( !error ) {
            var items = this.state.rowData;
            if (items[forms.props.isSelected]) {
                items[forms.props.isSelected].proj = list[0].value;
                items[forms.props.isSelected].subproj = list[1].value;
                items[forms.props.isSelected].priority = list[2].value;
                items[forms.props.isSelected].tech_t = list[3].value;
                items[forms.props.isSelected].qa_t = list[4].value;
                items[forms.props.isSelected].pub = list[5].value;
                items[forms.props.isSelected].leader = list[6].value;
                items[forms.props.isSelected].qa = list[7].value;
                items[forms.props.isSelected].prod = list[8].value;
                items[forms.props.isSelected].note = list[9].value;
            } else {
                items.push({
                    proj: list[0].value,
                    subproj: list[1].value,
                    priority: list[2].value,
                    tech_t: list[3].value,
                    qa_t: list[4].value,
                    pub: list[5].value,
                    leader: list[6].value,
                    qa: list[7].value,
                    prod: list[8].value,
                    note: list[9].value
                });
            }
            this.setState({ rowData: items });
            window.localStorage.rowData = JSON.stringify(this.state.rowData);
            // }
        }
    }, {
        key: 'tableCreate',
        value: function tableCreate(el, data) {
            document.getElementById('table_created') && document.getElementById('table_created').remove();
            var tbl = document.createElement('table');
            tbl.style.border = '1px solid #ccc';
            tbl.style.borderCollapse = 'collapse';
            tbl.id = 'table_created';

            var tr_thead = tbl.insertRow();
            for (var i = 0; i < 10; ++i) {
                var th = tr_thead.insertCell();
                th.style.padding = '10px';
                th.style.background = '#f0f0f0';
                th.style.fontWeight = 'bold';
                if (i != 9) th.style.borderRight = '1px solid #ccc';
                var name = i === 0 ? '项目' : i === 1 ? '子任务' : i === 2 ? '优先' : i === 3 ? '开发' : i === 4 ? '测试' : i === 5 ? '上线' : i === 6 ? '技术人' : i === 7 ? 'QA' : i === 8 ? '产品' : i === 9 ? '备注' : '';
                th.appendChild(document.createTextNode(name));
            }

            for (var i = 0; i < data.length; ++i) {
                var tr = tbl.insertRow();
                // if ( i % 2 === 0 ) tr.style.background = '#eee';
                tr.style.borderTop = '1px solid #ccc';
                for (var j = 0; j < 10; ++j) {
                    var td = tr.insertCell();
                    td.style.padding = '10px';
                    if (j !== 9) td.style.borderRight = '1px solid #ccc';
                    td.style.maxWidth = '300px';
                    if (j > 2 && j < 6) {
                        td.onclick = function () {
                            if (this.style.background == '') {
                                this.style.background = 'rgba(35, 218, 53, 0.6)';
                            } else if (this.style.background == 'rgba(35, 218, 53, 0.6)') {
                                this.style.background = 'rgba(255, 51, 51, 0.6)';
                            } else if (this.style.background == 'rgba(255, 51, 51, 0.6)') {
                                this.style.background = 'rgba(209, 226, 15, 0.6)';
                            } else if (this.style.background == 'rgba(209, 226, 15, 0.6)') {
                                this.style.background = '';
                            }
                            el.textContent = '<table>' + document.getElementById('table_created').innerHTML + '</table>';
                        };
                    }
                    var name = j === 0 ? 'proj' : j === 1 ? 'subproj' : j === 2 ? 'priority' : j === 3 ? 'tech_t' : j === 4 ? 'qa_t' : j === 5 ? 'pub' : j === 6 ? 'leader' : j === 7 ? 'qa' : j === 8 ? 'prod' : j === 9 ? 'note' : '';
                    td.innerHTML = data[i][name].toString().replace(/\\n/g, '<br>');
                }
            }
            document.getElementById('preview').appendChild(tbl);
            el.textContent = '<table>' + document.getElementById('table_created').innerHTML + '</table>';
        }
    }, {
        key: 'save',
        value: function save(e) {
            this.tableCreate(document.getElementById('results'), this.state.rowData);
        }
    }]);

    return Bodys;
})(_React$Component.Component);

exports['default'] = Bodys;
module.exports = exports['default'];


},{"./forms":3,"./trs":5,"material-ui":"material-ui","react/addons":"react/addons"}],3:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _RaisedButton$TextField = require('material-ui');

var Forms = (function (_Component) {
    function Forms(props) {
        _classCallCheck(this, Forms);

        _get(Object.getPrototypeOf(Forms.prototype), 'constructor', this).call(this, props);
    }

    _inherits(Forms, _Component);

    _createClass(Forms, [{
        key: 'handleSubmit',
        value: function handleSubmit(e) {
            this.props.handleSubmit(e, this);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e) {
            this.props.handleChange(e, this);
        }
    }, {
        key: 'render',
        value: function render() {

            var items_inputs = this.props.inputs.map(function (item, i) {
                // if (item.type == 'textarea') {
                //     return <TextField multiLine={true} key={i} hintText={item.values} floatingLabelText={item.text} value={ item.values  } onChange={ this.handleChange.bind(this) } />
                // } else {
                return _React$Component2['default'].createElement(_RaisedButton$TextField.TextField, { key: i, hintText: item.values, floatingLabelText: item.text, value: item.values, onChange: this.handleChange.bind(this) })
                // }
                ;
            }, this);

            return _React$Component2['default'].createElement(
                'form',
                { className: 'contents', onSubmit: this.handleSubmit.bind(this) },
                items_inputs,
                _React$Component2['default'].createElement(
                    'div',
                    null,
                    typeof this.props.isSelected === 'number' ? _React$Component2['default'].createElement(_RaisedButton$TextField.RaisedButton, { label: '修改' }) : _React$Component2['default'].createElement(_RaisedButton$TextField.RaisedButton, { label: '增加', secondary: true })
                )
            );
        }
    }]);

    return Forms;
})(_React$Component.Component);

exports['default'] = Forms;
module.exports = exports['default'];


},{"material-ui":"material-ui","react/addons":"react/addons"}],4:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _React$Component = require("react/addons");

var _React$Component2 = _interopRequireWildcard(_React$Component);

var Header = (function (_Component) {
    function Header() {
        _classCallCheck(this, Header);

        if (_Component != null) {
            _Component.apply(this, arguments);
        }
    }

    _inherits(Header, _Component);

    _createClass(Header, [{
        key: "render",
        value: function render() {
            return _React$Component2["default"].createElement(
                "div",
                { className: "header" },
                _React$Component2["default"].createElement(
                    "h3",
                    null,
                    "reactjs 版 - 周报生成器"
                )
            );
        }
    }]);

    return Header;
})(_React$Component.Component);

exports["default"] = Header;
module.exports = exports["default"];


},{"react/addons":"react/addons"}],5:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _FlatButton = require('material-ui');

var Trs = (function (_Component) {
    function Trs(props) {
        _classCallCheck(this, Trs);

        _get(Object.getPrototypeOf(Trs.prototype), 'constructor', this).call(this, props);
    }

    _inherits(Trs, _Component);

    _createClass(Trs, [{
        key: 'handleChange',
        value: function handleChange(e) {
            this.props.selectItem(this, e);
        }
    }, {
        key: 'handleDelete',
        value: function handleDelete(e) {
            this.props.deleteItem(this, e);
        }
    }, {
        key: 'render',
        value: function render() {
            return _React$Component2['default'].createElement(
                'tr',
                { key: this.props.item.id, onClick: this.handleChange.bind(this), className: this.props.isSelected === this.props.item.id ? 'selected' : '' },
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.proj
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.subproj
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.priority
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.tech_t
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.qa_t
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.pub
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.leader
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.qa
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.prod
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.note
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    _React$Component2['default'].createElement(_FlatButton.FlatButton, { onClick: this.handleDelete.bind(this), label: '删除', primary: true })
                )
            );
        }
    }]);

    return Trs;
})(_React$Component.Component);

exports['default'] = Trs;
module.exports = exports['default'];


},{"material-ui":"material-ui","react/addons":"react/addons"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL2xlYXJuUEhQL3B1YmxpYy93ZWVrbHkvc3JjL2FwcC5qcyIsIi9BcHBsaWNhdGlvbnMvWEFNUFAveGFtcHBmaWxlcy9odGRvY3MvbGVhcm5QSFAvcHVibGljL3dlZWtseS9zcmMvY29tcG9uZW50cy9ib2R5cy5qcyIsIi9BcHBsaWNhdGlvbnMvWEFNUFAveGFtcHBmaWxlcy9odGRvY3MvbGVhcm5QSFAvcHVibGljL3dlZWtseS9zcmMvY29tcG9uZW50cy9mb3Jtcy5qcyIsIi9BcHBsaWNhdGlvbnMvWEFNUFAveGFtcHBmaWxlcy9odGRvY3MvbGVhcm5QSFAvcHVibGljL3dlZWtseS9zcmMvY29tcG9uZW50cy9oZWFkZXIuanMiLCIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL2xlYXJuUEhQL3B1YmxpYy93ZWVrbHkvc3JjL2NvbXBvbmVudHMvdHJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsWUFBWSxDQUFDOztBQUViLElBQUksdUJBQXVCLEdBQUcsVUFBVSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7O0FBRTFHLElBQUksZUFBZSxHQUFHLFVBQVUsUUFBUSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLFlBQVksV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7O0FBRWpLLElBQUksWUFBWSxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLFVBQVUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxJQUFJLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDOztBQUV0akIsSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENB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QyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLEdBQUcsSUFB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VUFBVSxHQUFHLEdBQUcsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7O0FBRTFHLElBQUksZUFBZSxHQUFHLFVBQVUsUUFBUSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLFlBQVksV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7O0FBRWpLLElBQUksWUFBWSxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLFVBQVUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxJQUFJLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDOztBQUV0akIsSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLE1BQU0sSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUUsRUFBRSxPQUFPLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDOztBQUV6YixJQUFJLFNBQVMsR0FBRyxVQUFVLFFBQVEsRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLE9BQU8sVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQywwREFBMEQsR0FBRyxPQUFPLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLEVBQUUsUUFBUSxDQUFD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QyxTQUFTLENBQUMsQ0FBQztBQUNwQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfTtcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9O1xuXG52YXIgX1JlYWN0JENvbXBvbmVudCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xuXG52YXIgX1JlYWN0JENvbXBvbmVudDIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfUmVhY3QkQ29tcG9uZW50KTtcblxudmFyIF9pbmplY3RUYXBFdmVudFBsdWdpbiA9IHJlcXVpcmUoJ3JlYWN0LXRhcC1ldmVudC1wbHVnaW4nKTtcblxudmFyIF9pbmplY3RUYXBFdmVudFBsdWdpbjIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaW5qZWN0VGFwRXZlbnRQbHVnaW4pO1xuXG52YXIgX0hlYWRlciA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9oZWFkZXInKTtcblxudmFyIF9IZWFkZXIyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0hlYWRlcik7XG5cbnZhciBfQm9keXMgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvYm9keXMnKTtcblxudmFyIF9Cb2R5czIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfQm9keXMpO1xuXG5faW5qZWN0VGFwRXZlbnRQbHVnaW4yWydkZWZhdWx0J10oKTtcblxudmFyIEFwcCA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIEFwcChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwKTtcblxuICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihBcHAucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpbml0ZGF0YToge1xuICAgICAgICAgICAgICAgIHJvd0RhdGE6IHdpbmRvdy5sb2NhbFN0b3JhZ2Uucm93RGF0YSA/IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5yb3dEYXRhKSA6IFtdLFxuICAgICAgICAgICAgICAgIGlucHV0RGF0YTogW3tcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICfkvovvvJrlkI7lj7Dpobnnm64nLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn6aG555uuJ1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICdBJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+WtkOS7u+WKoSdcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiAnQScsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICfkvJjlhYgnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJzcvMjAnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn5byA5Y+RJ1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICcxMi8xMicsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICfmtYvor5UnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJzEyLzEyJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+S4iue6vydcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiAn5bCPYScsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICfmioDmnK/kuronXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJ+Wwj2InLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnUUEnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJ+Wwj3MnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn5Lqn5ZOBJ1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiAnZGVsYXnkuoYnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn5aSH5rOoJ1xuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEFwcCwgX0NvbXBvbmVudCk7XG5cbiAgICBfY3JlYXRlQ2xhc3MoQXBwLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfSGVhZGVyMlsnZGVmYXVsdCddLCBudWxsKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2JvZHlzJyB9LFxuICAgICAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0JvZHlzMlsnZGVmYXVsdCddLCB7IGluaXQ6IHRoaXMuc3RhdGUuaW5pdGRhdGEgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFwcDtcbn0pKF9SZWFjdCRDb21wb25lbnQuQ29tcG9uZW50KTtcblxuX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5yZW5kZXIoX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KEFwcCwgbnVsbCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOUJjSEJzYVdOaGRHbHZibk12V0VGTlVGQXZlR0Z0Y0hCbWFXeGxjeTlvZEdSdlkzTXZiR1ZoY201UVNGQXZjSFZpYkdsakwzZGxaV3RzZVM5emNtTXZZWEJ3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096c3JRa0ZEYVVNc1kwRkJZenM3T3p0dlEwRkRaQ3gzUWtGQmQwSTdPenM3YzBKQlEzUkRMSEZDUVVGeFFqczdPenR4UWtGRGRFSXNiMEpCUVc5Q096czdPMEZCUlhSRExHMURRVUZ6UWl4RFFVRkRPenRKUVVWcVFpeEhRVUZITzBGQlJVMHNZVUZHVkN4SFFVRkhMRU5CUlU4c1MwRkJTeXhGUVVGRk96aENRVVpxUWl4SFFVRkhPenRCUVVkRUxHMURRVWhHTEVkQlFVY3NOa05CUjBzc1MwRkJTeXhGUVVGRk8wRkJRMklzV1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnp0QlFVTlVMRzlDUVVGUkxFVkJRVU03UVVGRFRDeDFRa0ZCVHl4RlFVRkhMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUTNCR0xIbENRVUZUTEVWQlFVY3NRMEZEVWp0QlFVTkpMSGRDUVVGSkxFVkJRVVVzVFVGQlRUdEJRVU5hTERCQ1FVRk5MRVZCUVVVc1VVRkJVVHRCUVVOb1FpeDNRa0ZCU1N4RlFVRkZMRWxCUVVrN2FVSkJRMklzUlVGQlF6dEJRVU5GTEhkQ1FVRkpMRVZCUVVVc1RVRkJUVHRCUVVOYUxEQkNRVUZOTEVWQlFVVXNSMEZCUnp0QlFVTllMSGRDUVVGSkxFVkJRVVVzUzBGQlN6dHBRa0ZEWkN4RlFVRkRPMEZCUTBVc2QwSkJRVWtzUlVGQlJTeE5RVUZOTzBGQlExb3NNRUpCUVUwc1JVRkJSU3hIUVVGSE8wRkJRMWdzZDBKQlFVa3NSVUZCUlN4SlFVRkpPMmxDUVVOaUxFVkJRVU03UVVGRFJTeDNRa0ZCU1N4RlFVRkZMRTFCUVUwN1FVRkRXaXd3UWtGQlRTeEZRVUZGTEUxQlFVMDdRVUZEWkN4M1FrRkJTU3hGUVVGRkxFbEJRVWs3YVVKQlEySXNSVUZCUXp0QlFVTkZMSGRDUVVGSkxFVkJRVVVzVFVGQlRUdEJRVU5hTERCQ1FVRk5MRVZCUVVVc1QwRkJUenRCUVVObUxIZENRVUZKTEVWQlFVVXNTVUZCU1R0cFFrRkRZaXhGUVVGRE8wRkJRMFVzZDBKQlFVa3NSVUZCUlN4TlFVRk5PMEZCUTFvc01FSkJRVTBzUlVGQlJTeFBRVUZQTzBGQlEyWXNkMEpCUVVrc1JVRkJSU3hKUVVGSk8ybENRVU5pTEVWQlFVTTdRVUZEUlN4M1FrRkJTU3hGUVVGRkxFMUJRVTA3UVVGRFdpd3dRa0ZCVFN4RlFVRkZMRWxCUVVrN1FVRkRXaXgzUWtGQlNTeEZRVUZGTEV0QlFVczdhVUpCUTJRc1JVRkJRenRCUVVORkxIZENRVUZKTEVWQlFVVXNUVUZCVFR0QlFVTmFMREJDUVVGTkxFVkJRVVVzU1VGQlNUdEJRVU5hTEhkQ1FVRkpMRVZCUVVVc1NVRkJTVHRwUWtGRFlpeEZRVUZETzBGQlEwVXNkMEpCUVVrc1JVRkJSU3hOUVVGTk8wRkJRMW9zTUVKQlFVMHNSVUZCUlN4SlFVRkpPMEZCUTFvc2QwSkJRVWtzUlVGQlJTeEpRVUZKTzJsQ1FVTmlMRVZCUVVNN1FVRkRSU3gzUWtGQlNTeEZRVUZGTEZWQlFWVTdRVUZEYUVJc01FSkJRVTBzUlVGQlJTeFJRVUZSTzBGQlEyaENMSGRDUVVGSkxFVkJRVVVzU1VGQlNUdHBRa0ZEWWl4RFFVTktPMkZCUTBvN1UwRkRTaXhEUVVGQk8wdEJRMG83TzJOQmNFUkRMRWRCUVVjN08ybENRVUZJTEVkQlFVYzdPMlZCYzBSRExHdENRVUZITzBGQlEwd3NiVUpCUVU4N096dG5Ra0ZEU0N4eFJVRkJWVHRuUWtGRFZqczdjMEpCUVVzc1UwRkJVeXhGUVVGRExFOUJRVTg3YjBKQlEyeENMR2xGUVVGUExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1FVRkJReXhIUVVGSE8ybENRVU5zUXp0aFFVTktMRU5CUVVFN1UwRkRWRHM3TzFkQk4wUkRMRWRCUVVjN2IwSkJVRThzVTBGQlV6czdRVUYzUlhwQ0xEWkNRVUZOTEUxQlFVMHNRMEZCUlN3eVEwRkJReXhIUVVGSExFOUJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1pTENKbWFXeGxJam9pTDBGd2NHeHBZMkYwYVc5dWN5OVlRVTFRVUM5NFlXMXdjR1pwYkdWekwyaDBaRzlqY3k5c1pXRnlibEJJVUM5d2RXSnNhV012ZDJWbGEyeDVMM055WXk5aGNIQXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY2JtbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQzloWkdSdmJuTW5PMXh1YVcxd2IzSjBJR2x1YW1WamRGUmhjRVYyWlc1MFVHeDFaMmx1SUdaeWIyMGdKM0psWVdOMExYUmhjQzFsZG1WdWRDMXdiSFZuYVc0bk8xeHVhVzF3YjNKMElFaGxZV1JsY2lCbWNtOXRJQ2N1TDJOdmJYQnZibVZ1ZEhNdmFHVmhaR1Z5Snp0Y2JtbHRjRzl5ZENCQ2IyUjVjeUJtY205dElDY3VMMk52YlhCdmJtVnVkSE12WW05a2VYTW5PMXh1WEc1cGJtcGxZM1JVWVhCRmRtVnVkRkJzZFdkcGJpZ3BPMXh1WEc1amJHRnpjeUJCY0hBZ1pYaDBaVzVrY3lCRGIyMXdiMjVsYm5RZ2UxeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb2NISnZjSE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkR1JoZEdFNmUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZkMFJoZEdFZ09pQjNhVzVrYjNjdWJHOWpZV3hUZEc5eVlXZGxMbkp2ZDBSaGRHRWdQeUJLVTA5T0xuQmhjbk5sS0hkcGJtUnZkeTVzYjJOaGJGTjBiM0poWjJVdWNtOTNSR0YwWVNrZ09pQmJYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRFUmhkR0VnT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZDBaWGgwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxjem9nSitTK2krKzhtdVdRanVXUHNPbWh1ZWVicmljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUFuNmFHNTU1dXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkMFpYaDBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGN6b2dKMEVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dKK1d0a09TN3UrV0tvU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmRHVjRkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTTZJQ2RCSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJQ2ZrdkpqbGhZZ25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjNSbGVIUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWek9pQW5OeTh5TUNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUFuNWJ5QTVZK1JKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkMFpYaDBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbGN6b2dKekV5THpFeUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFE2SUNmbXRZdm9yNVVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozUmxlSFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpPaUFuTVRJdk1USW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ0orUzRpdWU2dnlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5kR1Y0ZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE02SUNmbHNJOWhKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRNklDZm1pb0Rtbksva3Vyb25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjNSbGVIUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWek9pQW41YkNQWWljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUFuVVVFblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM1JsZUhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6T2lBbjViQ1BjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhoME9pQW41THFuNVpPQkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2QwWlhoMFlYSmxZU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTTZJQ2RrWld4aGVlUzZoaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhoME9pQW41YVNINXJPb0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdQR1JwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhJWldGa1pYSWdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVltOWtlWE5jSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFFtOWtlWE1nYVc1cGREMTdkR2hwY3k1emRHRjBaUzVwYm1sMFpHRjBZWDBnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQThMMlJwZGo0Z0lGeHVJQ0FnSUgxY2JseHVmVnh1WEc1U1pXRmpkQzV5Wlc1a1pYSW9JRHhCY0hBZ0x6NHNJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHliMjkwSnlrZ0tUdGNiaUpkZlE9PSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9O1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfUmVhY3QkQ29tcG9uZW50ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG5cbnZhciBfUmVhY3QkQ29tcG9uZW50MiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9SZWFjdCRDb21wb25lbnQpO1xuXG52YXIgX1JhaXNlZEJ1dHRvbiA9IHJlcXVpcmUoJ21hdGVyaWFsLXVpJyk7XG5cbnZhciBfRm9ybXMgPSByZXF1aXJlKCcuL2Zvcm1zJyk7XG5cbnZhciBfRm9ybXMyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0Zvcm1zKTtcblxudmFyIF9UcnMgPSByZXF1aXJlKCcuL3RycycpO1xuXG52YXIgX1RyczIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfVHJzKTtcblxudmFyIEJvZHlzID0gKGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgZnVuY3Rpb24gQm9keXMocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvZHlzKTtcblxuICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihCb2R5cy5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvcHMuaW5pdDtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoQm9keXMsIF9Db21wb25lbnQpO1xuXG4gICAgX2NyZWF0ZUNsYXNzKEJvZHlzLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXG4gICAgICAgICAgICB2YXIgX2Zvcm1zID0gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9Gb3JtczJbJ2RlZmF1bHQnXSwgeyBpbnB1dHM6IHRoaXMuc3RhdGUuaW5wdXREYXRhIH0pO1xuICAgICAgICAgICAgdmFyIGZvcm1zID0gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5hZGRvbnMuY2xvbmVXaXRoUHJvcHMoX2Zvcm1zLCB7XG4gICAgICAgICAgICAgICAgaXNTZWxlY3RlZDogdGhpcy5zdGF0ZS5pc1NlbGVjdGVkLFxuICAgICAgICAgICAgICAgIGhhbmRsZVN1Ym1pdDogdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgdGhlYWRzID0gdGhpcy5zdGF0ZS5pbnB1dERhdGEuc2xpY2UoMCk7XG4gICAgICAgICAgICB0aGVhZHMucHVzaCh7IHRleHQ6ICfmk43kvZwnIH0pO1xuICAgICAgICAgICAgdmFyIHRoZWFkID0gdGhlYWRzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0aCcsXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiBpIH0sXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGV4dFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGl0ZW1zX3RycyA9IHRoaXMuc3RhdGUucm93RGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmlkID0gaTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9UcnMyWydkZWZhdWx0J10sIHsga2V5OiBpLCBpdGVtOiBpdGVtIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGl0ZW1zX3Rycy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5hZGRvbnMuY2xvbmVXaXRoUHJvcHMoaXRlbSwge1xuICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkOiB0aGlzLnN0YXRlLmlzU2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdEl0ZW06IHRoaXMuc2VsZWN0SXRlbS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVJdGVtOiB0aGlzLmRlbGV0ZUl0ZW0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd1c2VyLWRldGFpbCcgfSxcbiAgICAgICAgICAgICAgICBmb3JtcyxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3RhYmxlRGl2JyB9LFxuICAgICAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFibGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd1ay10YWJsZSB1ay10YWJsZS1zdHJpcGVkIHVrLXRleHQtbGVmdCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGhlYWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Rib2R5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdleHBvcnQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1JhaXNlZEJ1dHRvbi5SYWlzZWRCdXR0b24sIHsgbGFiZWw6ICflr7zlh7rkuLp0YWJsZScsIHByaW1hcnk6IHRydWUsIG9uQ2xpY2s6IHRoaXMuc2F2ZS5iaW5kKHRoaXMpIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZWxlY3RJdGVtJyxcblxuICAgICAgICAvLyA8cHJlPjxjb2RlPntKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnJvd0RhdGEsIG51bGwsICdcXHQnKX08L2NvZGU+PC9wcmU+XG4gICAgICAgIC8vIDxkaXY+PFJhaXNlZEJ1dHRvbiBsYWJlbD0n5L+d5a2Y5YiwIGxvY2Fsc3RvcmFnZScgcHJpbWFyeT17dHJ1ZX0gb25DbGljaz17dGhpcy5zYXZlLmJpbmQodGhpcyl9IC8+PC9kaXY+XG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RJdGVtKGl0ZW0sIGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX2lucHV0cyA9IHRoaXMuc3RhdGUuaW5wdXREYXRhLnNsaWNlKDApO1xuICAgICAgICAgICAgX2lucHV0c1swXS52YWx1ZXMgPSBpdGVtLnByb3BzLml0ZW0ucHJvajtcbiAgICAgICAgICAgIF9pbnB1dHNbMV0udmFsdWVzID0gaXRlbS5wcm9wcy5pdGVtLnN1YnByb2o7XG4gICAgICAgICAgICBfaW5wdXRzWzJdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5wcmlvcml0eTtcbiAgICAgICAgICAgIF9pbnB1dHNbM10udmFsdWVzID0gaXRlbS5wcm9wcy5pdGVtLnRlY2hfdDtcbiAgICAgICAgICAgIF9pbnB1dHNbNF0udmFsdWVzID0gaXRlbS5wcm9wcy5pdGVtLnFhX3Q7XG4gICAgICAgICAgICBfaW5wdXRzWzVdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5wdWI7XG4gICAgICAgICAgICBfaW5wdXRzWzZdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5sZWFkZXI7XG4gICAgICAgICAgICBfaW5wdXRzWzddLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5xYTtcbiAgICAgICAgICAgIF9pbnB1dHNbOF0udmFsdWVzID0gaXRlbS5wcm9wcy5pdGVtLnByb2Q7XG4gICAgICAgICAgICBfaW5wdXRzWzldLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5ub3RlO1xuICAgICAgICAgICAgdmFyIF9pc1NlbGVjdGVkID0gaXRlbS5wcm9wcy5pdGVtLmlkID09PSBpdGVtLnByb3BzLmlzU2VsZWN0ZWQgPyBmYWxzZSA6IGl0ZW0ucHJvcHMuaXRlbS5pZDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX2lzU2VsZWN0ZWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RGF0YTogX2lucHV0cyxcbiAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZDogX2lzU2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IF9pc1NlbGVjdGVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2RlbGV0ZUl0ZW0nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSXRlbShpdGVtLCBldmVudCkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgX2l0ZW1zID0gdGhpcy5zdGF0ZS5yb3dEYXRhO1xuICAgICAgICAgICAgX2l0ZW1zLnNwbGljZShpdGVtLnByb3BzLml0ZW0uaWQsIDEpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJvd0RhdGE6IF9pdGVtcyB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uucm93RGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUucm93RGF0YSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZUNoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSwgaXRlbSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMpLmluZGV4T2YoZS50YXJnZXQucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB2YXIgX2lucHV0cyA9IHRoaXMuc3RhdGUuaW5wdXREYXRhLnNsaWNlKDApO1xuICAgICAgICAgICAgX2lucHV0c1tpbmRleF0udmFsdWVzID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW5wdXREYXRhOiBfaW5wdXRzIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVTdWJtaXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlU3VibWl0KGUsIGZvcm1zKSB7XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudHMnKS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuXG4gICAgICAgICAgICAvLyB2YXIgZXJyb3IgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChsaXN0LCBmdW5jdGlvbiggaXRlbSApe1xuICAgICAgICAgICAgLy8gICAgIGlmICggaXRlbSApIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgaWYgKCAhaXRlbS52YWx1ZSApIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIGFsZXJ0KCdWYWx1ZSBzaG91bGRcXCduIGJlIGVtcHR5Jyk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9KTtcblxuICAgICAgICAgICAgLy8gaWYgKCAhZXJyb3IgKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLnN0YXRlLnJvd0RhdGE7XG4gICAgICAgICAgICBpZiAoaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0pIHtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5wcm9qID0gbGlzdFswXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5zdWJwcm9qID0gbGlzdFsxXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5wcmlvcml0eSA9IGxpc3RbMl0udmFsdWU7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0udGVjaF90ID0gbGlzdFszXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5xYV90ID0gbGlzdFs0XS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5wdWIgPSBsaXN0WzVdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGl0ZW1zW2Zvcm1zLnByb3BzLmlzU2VsZWN0ZWRdLmxlYWRlciA9IGxpc3RbNl0udmFsdWU7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0ucWEgPSBsaXN0WzddLnZhbHVlO1xuICAgICAgICAgICAgICAgIGl0ZW1zW2Zvcm1zLnByb3BzLmlzU2VsZWN0ZWRdLnByb2QgPSBsaXN0WzhdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGl0ZW1zW2Zvcm1zLnByb3BzLmlzU2VsZWN0ZWRdLm5vdGUgPSBsaXN0WzldLnZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcHJvajogbGlzdFswXS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvajogbGlzdFsxXS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IGxpc3RbMl0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHRlY2hfdDogbGlzdFszXS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcWFfdDogbGlzdFs0XS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcHViOiBsaXN0WzVdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBsZWFkZXI6IGxpc3RbNl0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHFhOiBsaXN0WzddLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwcm9kOiBsaXN0WzhdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBub3RlOiBsaXN0WzldLnZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcm93RGF0YTogaXRlbXMgfSk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJvd0RhdGEgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnJvd0RhdGEpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd0YWJsZUNyZWF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0YWJsZUNyZWF0ZShlbCwgZGF0YSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlX2NyZWF0ZWQnKSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFibGVfY3JlYXRlZCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdmFyIHRibCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgICAgICAgICB0Ymwuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjY2NjJztcbiAgICAgICAgICAgIHRibC5zdHlsZS5ib3JkZXJDb2xsYXBzZSA9ICdjb2xsYXBzZSc7XG4gICAgICAgICAgICB0YmwuaWQgPSAndGFibGVfY3JlYXRlZCc7XG5cbiAgICAgICAgICAgIHZhciB0cl90aGVhZCA9IHRibC5pbnNlcnRSb3coKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciB0aCA9IHRyX3RoZWFkLmluc2VydENlbGwoKTtcbiAgICAgICAgICAgICAgICB0aC5zdHlsZS5wYWRkaW5nID0gJzEwcHgnO1xuICAgICAgICAgICAgICAgIHRoLnN0eWxlLmJhY2tncm91bmQgPSAnI2YwZjBmMCc7XG4gICAgICAgICAgICAgICAgdGguc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSA5KSB0aC5zdHlsZS5ib3JkZXJSaWdodCA9ICcxcHggc29saWQgI2NjYyc7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBpID09PSAwID8gJ+mhueebricgOiBpID09PSAxID8gJ+WtkOS7u+WKoScgOiBpID09PSAyID8gJ+S8mOWFiCcgOiBpID09PSAzID8gJ+W8gOWPkScgOiBpID09PSA0ID8gJ+a1i+ivlScgOiBpID09PSA1ID8gJ+S4iue6vycgOiBpID09PSA2ID8gJ+aKgOacr+S6uicgOiBpID09PSA3ID8gJ1FBJyA6IGkgPT09IDggPyAn5Lqn5ZOBJyA6IGkgPT09IDkgPyAn5aSH5rOoJyA6ICcnO1xuICAgICAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5hbWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyID0gdGJsLmluc2VydFJvdygpO1xuICAgICAgICAgICAgICAgIC8vIGlmICggaSAlIDIgPT09IDAgKSB0ci5zdHlsZS5iYWNrZ3JvdW5kID0gJyNlZWUnO1xuICAgICAgICAgICAgICAgIHRyLnN0eWxlLmJvcmRlclRvcCA9ICcxcHggc29saWQgI2NjYyc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxMDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZCA9IHRyLmluc2VydENlbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgdGQuc3R5bGUucGFkZGluZyA9ICcxMHB4JztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogIT09IDkpIHRkLnN0eWxlLmJvcmRlclJpZ2h0ID0gJzFweCBzb2xpZCAjY2NjJztcbiAgICAgICAgICAgICAgICAgICAgdGQuc3R5bGUubWF4V2lkdGggPSAnMzAwcHgnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDIgJiYgaiA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRkLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGUuYmFja2dyb3VuZCA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgzNSwgMjE4LCA1MywgMC42KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0eWxlLmJhY2tncm91bmQgPT0gJ3JnYmEoMzUsIDIxOCwgNTMsIDAuNiknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZCA9ICdyZ2JhKDI1NSwgNTEsIDUxLCAwLjYpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3R5bGUuYmFja2dyb3VuZCA9PSAncmdiYSgyNTUsIDUxLCA1MSwgMC42KScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEoMjA5LCAyMjYsIDE1LCAwLjYpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3R5bGUuYmFja2dyb3VuZCA9PSAncmdiYSgyMDksIDIyNiwgMTUsIDAuNiknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9ICc8dGFibGU+JyArIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZV9jcmVhdGVkJykuaW5uZXJIVE1MICsgJzwvdGFibGU+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBqID09PSAwID8gJ3Byb2onIDogaiA9PT0gMSA/ICdzdWJwcm9qJyA6IGogPT09IDIgPyAncHJpb3JpdHknIDogaiA9PT0gMyA/ICd0ZWNoX3QnIDogaiA9PT0gNCA/ICdxYV90JyA6IGogPT09IDUgPyAncHViJyA6IGogPT09IDYgPyAnbGVhZGVyJyA6IGogPT09IDcgPyAncWEnIDogaiA9PT0gOCA/ICdwcm9kJyA6IGogPT09IDkgPyAnbm90ZScgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgdGQuaW5uZXJIVE1MID0gZGF0YVtpXVtuYW1lXS50b1N0cmluZygpLnJlcGxhY2UoL1xcXFxuL2csICc8YnI+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZXZpZXcnKS5hcHBlbmRDaGlsZCh0YmwpO1xuICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSAnPHRhYmxlPicgKyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFibGVfY3JlYXRlZCcpLmlubmVySFRNTCArICc8L3RhYmxlPic7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NhdmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZShlKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlQ3JlYXRlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN1bHRzJyksIHRoaXMuc3RhdGUucm93RGF0YSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQm9keXM7XG59KShfUmVhY3QkQ29tcG9uZW50LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEJvZHlzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5QmNIQnNhV05oZEdsdmJuTXZXRUZOVUZBdmVHRnRjSEJtYVd4bGN5OW9kR1J2WTNNdmJHVmhjbTVRU0ZBdmNIVmliR2xqTDNkbFpXdHNlUzl6Y21NdlkyOXRjRzl1Wlc1MGN5OWliMlI1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3T3l0Q1FVTnBReXhqUVVGak96czdPelJDUVVWc1FpeGhRVUZoT3p0eFFrRkZlRUlzVTBGQlV6czdPenR0UWtGRldDeFBRVUZQT3pzN08wbEJSV3BDTEV0QlFVczdRVUZGU1N4aFFVWlVMRXRCUVVzc1EwRkZTeXhMUVVGTExFVkJRVVU3T0VKQlJtcENMRXRCUVVzN08wRkJSMGdzYlVOQlNFWXNTMEZCU3l3MlEwRkhSeXhMUVVGTExFVkJRVVU3UVVGRFlpeFpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZCTzB0QlF5OUNPenRqUVV4RExFdEJRVXM3TzJsQ1FVRk1MRXRCUVVzN08yVkJUMFFzYTBKQlFVYzdPMEZCUlV3c1owSkJRVWtzVFVGQlRTeEhRVUZITEdsRlFVRlBMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRVUZCUXl4SFFVRkhMRU5CUVVNN1FVRkRja1FzWjBKQlFVa3NTMEZCU3l4SFFVRkhMRFpDUVVGTkxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUXpWRExEQkNRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVk8wRkJRMnBETERSQ1FVRlpMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUXpGRExEUkNRVUZaTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzJGQlF6ZERMRU5CUVVNc1EwRkJRenM3UVVGRlNDeG5Ra0ZCU1N4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRek5ETEd0Q1FVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkROVUlzWjBKQlFVa3NTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkhPMEZCUTNaRExIVkNRVUZQT3p0elFrRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF5eEJRVUZETzI5Q1FVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8ybENRVUZOTEVOQlFVTTdZVUZEZGtNc1EwRkJReXhEUVVGQk96dEJRVVZHTEdkQ1FVRkpMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJVeXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZETzBGQlEzQkVMRzlDUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTmFMSFZDUVVGUExDdEVRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkRMRUZCUVVNc1JVRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEJRVUZETEVkQlFVY3NRMEZCUVR0aFFVTnlReXhEUVVGRExFTkJRVU03TzBGQlJVZ3NaMEpCUVVrc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVXl4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRE8wRkJRM1pETEhWQ1FVRlBMRFpDUVVGTkxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNKRExEaENRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVk8wRkJRMnBETERoQ1FVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTNSRExEaENRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzJsQ1FVTjZReXhEUVVGRExFTkJRVU03WVVGRFRpeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPenRCUVVWVUxHMUNRVU5KT3p0clFrRkJTeXhUUVVGVExFVkJRVU1zWVVGQllUdG5Ra0ZEZGtJc1MwRkJTenRuUWtGRFRqczdjMEpCUVVzc1UwRkJVeXhGUVVGRExGVkJRVlU3YjBKQlEzSkNPenN3UWtGQlR5eFRRVUZUTEVWQlFVTXNkME5CUVhkRE8zZENRVU55UkRzN096UkNRVU5KT3pzN1owTkJRVXNzUzBGQlN6czJRa0ZCVFR0NVFrRkRXanQzUWtGRFVqczdPelJDUVVGUkxFdEJRVXM3ZVVKQlFWTTdjVUpCUTJ4Q08yOUNRVU5TT3pzd1FrRkJTeXhUUVVGVExFVkJRVU1zVVVGQlVUdDNRa0ZCUXl4NVJFRnVSRzVETEZsQlFWa3NTVUZ0UkhGRExFdEJRVXNzUlVGQlF5eFZRVUZWTEVWQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1FVRkJReXhGUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUVVGQlF5eEhRVUZITzNGQ1FVRk5PMmxDUVVNelJ6dGhRVU5LTEVOQlExUTdVMEZEU2pzN096czdPMlZCUjFNc2IwSkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUnp0QlFVTjBRaXhuUWtGQlNTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpWRExHMUNRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVONlF5eHRRa0ZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU03UVVGRE5VTXNiVUpCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlF6ZERMRzFDUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXpReXh0UWtGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRla01zYlVKQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRM2hETEcxQ1FVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU16UXl4dFFrRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZEZGtNc2JVSkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTNwRExHMUNRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVONlF5eG5Ra0ZCU1N4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZETlVZc1owSkJRVXNzVDBGQlR5eFhRVUZYTEV0QlFVc3NVVUZCVVN4RlFVRkhPMEZCUTI1RExHOUNRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUTFZc05rSkJRVk1zUlVGQlJTeFBRVUZQTzBGQlEyeENMRGhDUVVGVkxFVkJRVVVzVjBGQlZ6dHBRa0ZETVVJc1EwRkJReXhEUVVGRE8yRkJRMDRzVFVGQlRUdEJRVU5JTEc5Q1FVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRMVlzT0VKQlFWVXNSVUZCUlN4WFFVRlhPMmxDUVVNeFFpeERRVUZETEVOQlFVRTdZVUZEVER0VFFVTktPenM3WlVGRlV5eHZRa0ZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGSE8wRkJRM1JDTEdsQ1FVRkxMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU03UVVGRGVFSXNaMEpCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRPMEZCUTJoRExHdENRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVVc1EwRkJRenRCUVVOMlF5eG5Ra0ZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTI1RExHdENRVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VTBGRGNFVTdPenRsUVVWWExITkNRVUZGTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVjN1FVRkRjRUlzWjBKQlFVa3NTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkZMRU5CUVVNN1FVRkRia2dzWjBKQlFVa3NUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNMVF5eHRRa0ZCVHl4RFFVRkZMRXRCUVVzc1EwRkJSU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVONlF5eG5Ra0ZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxGTkJRVk1zUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkJPMU5CUTNoRE96czdaVUZGVnl4elFrRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZIT3p0QlFVVnlRaXhoUVVGRExFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVTTdPMEZCUlc1Q0xHZENRVUZKTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZET3pzN096czdPenM3T3pzN096dEJRV055UlN4blFrRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNN1FVRkRMMElzWjBKQlFVc3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVYzdRVUZEYWtNc2NVSkJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFbEJRVWtzUjBGQlVTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRM2hFTEhGQ1FVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4UFFVRlBMRWRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTjRSQ3h4UWtGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zVVVGQlVTeEhRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRGVFUXNjVUpCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUTNoRUxIRkNRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFWRXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU40UkN4eFFrRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGVExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRlRVFzY1VKQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCVFN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzBGQlEzaEVMSEZDUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVlVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVONFJDeHhRa0ZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZEZUVRc2NVSkJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFbEJRVWtzUjBGQlVTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8yRkJRek5FTEUxQlFVMDdRVUZEU0N4eFFrRkJTeXhEUVVGRExFbEJRVWtzUTBGQlJUdEJRVU5TTEhkQ1FVRkpMRVZCUVU4c1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVczdRVUZEZUVJc01rSkJRVThzUlVGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTenRCUVVONFFpdzBRa0ZCVVN4RlFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTzBGQlEzaENMREJDUVVGTkxFVkJRVXNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzN1FVRkRlRUlzZDBKQlFVa3NSVUZCVHl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN6dEJRVU40UWl4MVFrRkJSeXhGUVVGUkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxPMEZCUTNoQ0xEQkNRVUZOTEVWQlFVc3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXM3UVVGRGVFSXNjMEpCUVVVc1JVRkJVeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3p0QlFVTjRRaXgzUWtGQlNTeEZRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTE8wRkJRM2hDTEhkQ1FVRkpMRVZCUVU4c1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVczdhVUpCUXpOQ0xFTkJRVVVzUTBGQlF6dGhRVU5RTzBGQlEwUXNaMEpCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOc1F5eHJRa0ZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZET3p0VFFVVjRSVHM3TzJWQlIxVXNjVUpCUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU5zUWl4dlFrRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUXpsR0xHZENRVUZKTEVkQlFVY3NSMEZCU1N4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlF6TkRMR1ZCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8wRkJRM0JETEdWQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhIUVVGSExGVkJRVlVzUTBGQlF6dEJRVU4wUXl4bFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExHVkJRV1VzUTBGQlF6czdRVUZGZWtJc1owSkJRVWtzVVVGQlVTeEhRVUZITEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRenRCUVVNdlFpeHBRa0ZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVONlFpeHZRa0ZCU1N4RlFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzBGQlF5OUNMR3RDUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRNVUlzYTBKQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExGTkJRVk1zUTBGQlF6dEJRVU5vUXl4clFrRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVkQlFVY3NUVUZCVFN4RFFVRkRPMEZCUXpkQ0xHOUNRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03UVVGRGRFUXNiMEpCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4SFFVTllMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eEhRVU5tTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hIUVVOa0xFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4SFFVTmtMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzU1VGQlNTeEhRVU5rTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hIUVVOa0xFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4SFFVTm1MRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzU1VGQlNTeEhRVU5rTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hIUVVOa0xFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4SFFVTmtMRVZCUVVVc1EwRkJRenRCUVVOcVFpeHJRa0ZCUlN4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkRha1E3TzBGQlJVUXNhVUpCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVU53UXp0QlFVTkpMRzlDUVVGSkxFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN08wRkJSWHBDTEd0Q1FVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJRenRCUVVOMFF5eHhRa0ZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVONlFpeDNRa0ZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzBGQlEzcENMSE5DUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRNVUlzZDBKQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NSMEZCUnl4blFrRkJaMElzUTBGQlF6dEJRVU4yUkN4elFrRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUXpWQ0xIZENRVUZKTEVOQlFVTXNSMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGRExFTkJRVU1zUlVGQlJUdEJRVU5hTERCQ1FVRkZMRU5CUVVNc1QwRkJUeXhIUVVGSExGbEJRVms3UVVGRGNrSXNaME5CUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVsQlFVa3NSVUZCUlN4RlFVRkZPMEZCUXpkQ0xHOURRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1IwRkJSeXgzUWtGQmQwSXNRMEZCUVRzMlFrRkRia1FzVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hKUVVGSkxIZENRVUYzUWl4RlFVRkZPMEZCUXpGRUxHOURRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1IwRkJSeXgzUWtGQmQwSXNRMEZCUVRzMlFrRkRia1FzVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hKUVVGSkxIZENRVUYzUWl4RlFVRkZPMEZCUXpGRUxHOURRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1IwRkJSeXg1UWtGQmVVSXNRMEZCUVRzMlFrRkRjRVFzVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hKUVVGSkxIbENRVUY1UWl4RlFVRkZPMEZCUXpORUxHOURRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1IwRkJSeXhGUVVGRkxFTkJRVUU3TmtKQlF6ZENPMEZCUTBRc09FSkJRVVVzUTBGQlF5eFhRVUZYTEVkQlFVY3NVMEZCVXl4SFFVRkRMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkRMRlZCUVZVc1EwRkJRenQ1UWtGRE5VWXNRMEZCUVR0eFFrRkRTanRCUVVORUxIZENRVUZKTEVsQlFVa3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFMUJRVTBzUjBGRGFrSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhUUVVGVExFZEJRMjVDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1ZVRkJWU3hIUVVOd1FpeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRkZCUVZFc1IwRkRiRUlzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TlFVRk5MRWRCUTJoQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4SFFVTm1MRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzVVVGQlVTeEhRVU5zUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFbEJRVWtzUjBGRFpDeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRTFCUVUwc1IwRkRhRUlzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TlFVRk5MRWRCUTJoQ0xFVkJRVVVzUTBGQlF6dEJRVU5pTEhOQ1FVRkZMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8ybENRVU51UlR0aFFVTktPMEZCUTBRc2IwSkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzQkVMR05CUVVVc1EwRkJReXhYUVVGWExFZEJRVWNzVTBGQlV5eEhRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zVTBGQlV5eEhRVUZETEZWQlFWVXNRMEZCUXp0VFFVTTFSanM3TzJWQlEwY3NZMEZCUlN4RFFVRkRMRVZCUVVjN1FVRkRUaXhuUWtGQlNTeERRVUZETEZkQlFWY3NRMEZCUlN4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VTBGRE9VVTdPenRYUVhKT1F5eExRVUZMTzI5Q1FWSkxMRk5CUVZNN08zRkNRV2xQVml4TFFVRkxJaXdpWm1sc1pTSTZJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5aWIyUjVjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklseHVhVzF3YjNKMElGSmxZV04wTENCN0lFTnZiWEJ2Ym1WdWRDQjlJR1p5YjIwZ0ozSmxZV04wTDJGa1pHOXVjeWM3WEc1Y2JtbHRjRzl5ZENCN0lGSmhhWE5sWkVKMWRIUnZiaUI5SUdaeWIyMGdKMjFoZEdWeWFXRnNMWFZwSnp0Y2JseHVhVzF3YjNKMElFWnZjbTF6SUdaeWIyMGdKeTR2Wm05eWJYTW5PMXh1WEc1cGJYQnZjblFnVkhKeklHWnliMjBnSnk0dmRISnpKenRjYmx4dVkyeGhjM01nUW05a2VYTWdaWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0hKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9jSEp2Y0hNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYUmxJRDBnZEdocGN5NXdjbTl3Y3k1cGJtbDBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVnVaR1Z5S0NrZ2UxeHVYRzRnSUNBZ0lDQWdJSFpoY2lCZlptOXliWE1nUFNBOFJtOXliWE1nYVc1d2RYUnpQWHQwYUdsekxuTjBZWFJsTG1sdWNIVjBSR0YwWVgwZ0x6NDdYRzRnSUNBZ0lDQWdJSFpoY2lCbWIzSnRjeUE5SUZKbFlXTjBMbUZrWkc5dWN5NWpiRzl1WlZkcGRHaFFjbTl3Y3loZlptOXliWE1zSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6VTJWc1pXTjBaV1E2SUhSb2FYTXVjM1JoZEdVdWFYTlRaV3hsWTNSbFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVk4xWW0xcGREb2dkR2hwY3k1b1lXNWtiR1ZUZFdKdGFYUXVZbWx1WkNoMGFHbHpLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlVOb1lXNW5aVG9nZEdocGN5NW9ZVzVrYkdWRGFHRnVaMlV1WW1sdVpDaDBhR2x6S1Z4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2RHaGxZV1J6SUQwZ2RHaHBjeTV6ZEdGMFpTNXBibkIxZEVSaGRHRXVjMnhwWTJVb01DazdYRzRnSUNBZ0lDQWdJSFJvWldGa2N5NXdkWE5vS0hzZ2RHVjRkRG9nSithVGplUzluQ2NnZlNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwYUdWaFpDQTlJSFJvWldGa2N5NXRZWEFvWm5WdVkzUnBiMjRvSUdsMFpXMHNJR2tnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdQSFJvSUd0bGVUMTdhWDArZTJsMFpXMHVkR1Y0ZEgwOEwzUm9QanRjYmlBZ0lDQWdJQ0FnZlNsY2JseHVJQ0FnSUNBZ0lDQjJZWElnYVhSbGJYTmZkSEp6SUQwZ2RHaHBjeTV6ZEdGMFpTNXliM2RFWVhSaExtMWhjQ2htZFc1amRHbHZiaWhwZEdWdExDQnBLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzB1YVdRZ1BTQnBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUR4VWNuTWdhMlY1UFh0cGZTQnBkR1Z0UFh0cGRHVnRmU0F2UGx4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2FYUmxiWE1nUFNCcGRHVnRjMTkwY25NdWJXRndLR1oxYm1OMGFXOXVLR2wwWlcwc0lHa3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZKbFlXTjBMbUZrWkc5dWN5NWpiRzl1WlZkcGRHaFFjbTl3Y3locGRHVnRMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOVFpXeGxZM1JsWkRvZ2RHaHBjeTV6ZEdGMFpTNXBjMU5sYkdWamRHVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRFbDBaVzA2SUhSb2FYTXVjMlZzWldOMFNYUmxiUzVpYVc1a0tIUm9hWE1wTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaVWwwWlcwNklIUm9hWE11WkdWc1pYUmxTWFJsYlM1aWFXNWtLSFJvYVhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3lrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpZFhObGNpMWtaWFJoYVd4Y0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdabTl5YlhOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKMFlXSnNaVVJwZGx3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZEdGaWJHVWdZMnhoYzNOT1lXMWxQVndpZFdzdGRHRmliR1VnZFdzdGRHRmliR1V0YzNSeWFYQmxaQ0IxYXkxMFpYaDBMV3hsWm5SY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeDBhR1ZoWkQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkSEkrZTNSb1pXRmtmVHd2ZEhJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwzUm9aV0ZrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhSaWIyUjVQbnRwZEdWdGMzMDhMM1JpYjJSNVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSaFlteGxQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1WNGNHOXlkRndpUGp4U1lXbHpaV1JDZFhSMGIyNGdiR0ZpWld3OUorV3Z2T1dIdXVTNHVuUmhZbXhsSnlCd2NtbHRZWEo1UFh0MGNuVmxmU0J2YmtOc2FXTnJQWHQwYUdsekxuTmhkbVV1WW1sdVpDaDBhR2x6S1gwZ0x6NDhMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBcFhHNGdJQ0FnZlZ4dUx5OGdQSEJ5WlQ0OFkyOWtaVDU3U2xOUFRpNXpkSEpwYm1kcFpua29kR2hwY3k1emRHRjBaUzV5YjNkRVlYUmhMQ0J1ZFd4c0xDQW5YRngwSnlsOVBDOWpiMlJsUGp3dmNISmxQbHh1THk4Z1BHUnBkajQ4VW1GcGMyVmtRblYwZEc5dUlHeGhZbVZzUFNma3Y1M2xyWmpsaUxBZ2JHOWpZV3h6ZEc5eVlXZGxKeUJ3Y21sdFlYSjVQWHQwY25WbGZTQnZia05zYVdOclBYdDBhR2x6TG5OaGRtVXVZbWx1WkNoMGFHbHpLWDBnTHo0OEwyUnBkajVjYmlBZ0lDQnpaV3hsWTNSSmRHVnRLQ0JwZEdWdExDQmxkbVZ1ZENBcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5cGJuQjFkSE1nUFNCMGFHbHpMbk4wWVhSbExtbHVjSFYwUkdGMFlTNXpiR2xqWlNnd0tUdGNiaUFnSUNBZ0lDQWdYMmx1Y0hWMGMxc3dYUzUyWVd4MVpYTWdQU0JwZEdWdExuQnliM0J6TG1sMFpXMHVjSEp2YWp0Y2JpQWdJQ0FnSUNBZ1gybHVjSFYwYzFzeFhTNTJZV3gxWlhNZ1BTQnBkR1Z0TG5CeWIzQnpMbWwwWlcwdWMzVmljSEp2YWp0Y2JpQWdJQ0FnSUNBZ1gybHVjSFYwYzFzeVhTNTJZV3gxWlhNZ1BTQnBkR1Z0TG5CeWIzQnpMbWwwWlcwdWNISnBiM0pwZEhrN1hHNGdJQ0FnSUNBZ0lGOXBibkIxZEhOYk0xMHVkbUZzZFdWeklEMGdhWFJsYlM1d2NtOXdjeTVwZEdWdExuUmxZMmhmZER0Y2JpQWdJQ0FnSUNBZ1gybHVjSFYwYzFzMFhTNTJZV3gxWlhNZ1BTQnBkR1Z0TG5CeWIzQnpMbWwwWlcwdWNXRmZkRHRjYmlBZ0lDQWdJQ0FnWDJsdWNIVjBjMXMxWFM1MllXeDFaWE1nUFNCcGRHVnRMbkJ5YjNCekxtbDBaVzB1Y0hWaU8xeHVJQ0FnSUNBZ0lDQmZhVzV3ZFhSeld6WmRMblpoYkhWbGN5QTlJR2wwWlcwdWNISnZjSE11YVhSbGJTNXNaV0ZrWlhJN1hHNGdJQ0FnSUNBZ0lGOXBibkIxZEhOYk4xMHVkbUZzZFdWeklEMGdhWFJsYlM1d2NtOXdjeTVwZEdWdExuRmhPMXh1SUNBZ0lDQWdJQ0JmYVc1d2RYUnpXemhkTG5aaGJIVmxjeUE5SUdsMFpXMHVjSEp2Y0hNdWFYUmxiUzV3Y205a08xeHVJQ0FnSUNBZ0lDQmZhVzV3ZFhSeld6bGRMblpoYkhWbGN5QTlJR2wwWlcwdWNISnZjSE11YVhSbGJTNXViM1JsTzF4dUlDQWdJQ0FnSUNCMllYSWdYMmx6VTJWc1pXTjBaV1FnUFNCcGRHVnRMbkJ5YjNCekxtbDBaVzB1YVdRZ1BUMDlJR2wwWlcwdWNISnZjSE11YVhOVFpXeGxZM1JsWkNBL0lHWmhiSE5sSURvZ2FYUmxiUzV3Y205d2N5NXBkR1Z0TG1sa08xeHVJQ0FnSUNBZ0lDQnBaaUFvSUhSNWNHVnZaaUJmYVhOVFpXeGxZM1JsWkNBOVBUMGdKMjUxYldKbGNpY2dLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkRVJoZEdFNklGOXBibkIxZEhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTlRaV3hsWTNSbFpEb2dYMmx6VTJWc1pXTjBaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOVFpXeGxZM1JsWkRvZ1gybHpVMlZzWldOMFpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCa1pXeGxkR1ZKZEdWdEtDQnBkR1Z0TENCbGRtVnVkQ0FwSUh0Y2JpQWdJQ0FnSUNBZ1pYWmxiblF1YzNSdmNGQnliM0JoWjJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZhWFJsYlhNZ1BTQjBhR2x6TG5OMFlYUmxMbkp2ZDBSaGRHRTdYRzRnSUNBZ0lDQWdJRjlwZEdWdGN5NXpjR3hwWTJVb0lHbDBaVzB1Y0hKdmNITXVhWFJsYlM1cFpDd2dNU0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnY205M1JHRjBZVG9nWDJsMFpXMXpJSDBwTzF4dUlDQWdJQ0FnSUNCM2FXNWtiM2N1Ykc5allXeFRkRzl5WVdkbExuSnZkMFJoZEdFZ1BTQktVMDlPTG5OMGNtbHVaMmxtZVNoMGFHbHpMbk4wWVhSbExuSnZkMFJoZEdFcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdoaGJtUnNaVU5vWVc1blpTZ2daU3dnYVhSbGJTQXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b0lHVXVkR0Z5WjJWMExuQmhjbVZ1ZEU1dlpHVXVjR0Z5Wlc1MFRtOWtaUzVqYUdsc1pFNXZaR1Z6SUNrdWFXNWtaWGhQWmlnZ1pTNTBZWEpuWlhRdWNHRnlaVzUwVG05a1pTQXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gybHVjSFYwY3lBOUlIUm9hWE11YzNSaGRHVXVhVzV3ZFhSRVlYUmhMbk5zYVdObEtEQXBPMXh1SUNBZ0lDQWdJQ0JmYVc1d2RYUnpXeUJwYm1SbGVDQmRMblpoYkhWbGN5QTlJR1V1ZEdGeVoyVjBMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2FXNXdkWFJFWVhSaE9pQmZhVzV3ZFhSeklIMHBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FHRnVaR3hsVTNWaWJXbDBLQ0JsTENCbWIzSnRjeUFwSUh0Y2JseHVJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHeHBjM1FnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1WTI5dWRHVnVkSE1uS1M1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkcGJuQjFkQ2NwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJSFpoY2lCbGNuSnZjaUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1admNrVmhZMmd1WTJGc2JDaHNhWE4wTENCbWRXNWpkR2x2YmlnZ2FYUmxiU0FwZTF4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnYVdZZ0tDQnBkR1Z0SUNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJR2xtSUNnZ0lXbDBaVzB1ZG1Gc2RXVWdLU0I3WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJR0ZzWlhKMEtDZFdZV3gxWlNCemFHOTFiR1JjWENkdUlHSmxJR1Z0Y0hSNUp5azdYRzRnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR2xtSUNnZ0lXVnljbTl5SUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbDBaVzF6SUQwZ2RHaHBjeTV6ZEdGMFpTNXliM2RFWVhSaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDQnBkR1Z0YzF0bWIzSnRjeTV3Y205d2N5NXBjMU5sYkdWamRHVmtYU0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRjMXRtYjNKdGN5NXdjbTl3Y3k1cGMxTmxiR1ZqZEdWa1hTNXdjbTlxSUNBZ0lDQWdQU0JzYVhOMFd6QmRMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzF6VzJadmNtMXpMbkJ5YjNCekxtbHpVMlZzWldOMFpXUmRMbk4xWW5CeWIyb2dJQ0E5SUd4cGMzUmJNVjB1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFJsYlhOYlptOXliWE11Y0hKdmNITXVhWE5UWld4bFkzUmxaRjB1Y0hKcGIzSnBkSGtnSUQwZ2JHbHpkRnN5WFM1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdGMxdG1iM0p0Y3k1d2NtOXdjeTVwYzFObGJHVmpkR1ZrWFM1MFpXTm9YM1FnSUNBZ1BTQnNhWE4wV3pOZExuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsMFpXMXpXMlp2Y20xekxuQnliM0J6TG1selUyVnNaV04wWldSZExuRmhYM1FnSUNBZ0lDQTlJR3hwYzNSYk5GMHVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiWE5iWm05eWJYTXVjSEp2Y0hNdWFYTlRaV3hsWTNSbFpGMHVjSFZpSUNBZ0lDQWdJRDBnYkdsemRGczFYUzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0YzF0bWIzSnRjeTV3Y205d2N5NXBjMU5sYkdWamRHVmtYUzVzWldGa1pYSWdJQ0FnUFNCc2FYTjBXelpkTG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxelcyWnZjbTF6TG5CeWIzQnpMbWx6VTJWc1pXTjBaV1JkTG5GaElDQWdJQ0FnSUNBOUlHeHBjM1JiTjEwdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJYTmJabTl5YlhNdWNISnZjSE11YVhOVFpXeGxZM1JsWkYwdWNISnZaQ0FnSUNBZ0lEMGdiR2x6ZEZzNFhTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRjMXRtYjNKdGN5NXdjbTl3Y3k1cGMxTmxiR1ZqZEdWa1hTNXViM1JsSUNBZ0lDQWdQU0JzYVhOMFd6bGRMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdGN5NXdkWE5vS0NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJvZ0lDQWdJRG9nYkdsemRGc3dYUzUyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWaWNISnZhaUFnT2lCc2FYTjBXekZkTG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtbHZjbWwwZVNBNklHeHBjM1JiTWwwdWRtRnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxZMmhmZENBZ0lEb2diR2x6ZEZzelhTNTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjV0ZmZENBZ0lDQWdPaUJzYVhOMFd6UmRMblpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3ZFdJZ0lDQWdJQ0E2SUd4cGMzUmJOVjB1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bFlXUmxjaUFnSURvZ2JHbHpkRnMyWFM1MllXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NXRWdJQ0FnSUNBZ09pQnNhWE4wV3pkZExuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTlrSUNBZ0lDQTZJR3hwYzNSYk9GMHVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZEdVZ0lDQWdJRG9nYkdsemRGczVYUzUyWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJ5YjNkRVlYUmhPaUJwZEdWdGN5QjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1c2IyTmhiRk4wYjNKaFoyVXVjbTkzUkdGMFlTQTlJRXBUVDA0dWMzUnlhVzVuYVdaNUtIUm9hWE11YzNSaGRHVXVjbTkzUkdGMFlTazdYRzRnSUNBZ0lDQWdJQzh2SUgxY2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUhSaFlteGxRM0psWVhSbEtHVnNMQ0JrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZDBZV0pzWlY5amNtVmhkR1ZrSnlrZ0ppWWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0ozUmhZbXhsWDJOeVpXRjBaV1FuS1M1eVpXMXZkbVVvS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJpYkNBZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWRHRmliR1ZjSWlrN1hHNGdJQ0FnSUNBZ0lIUmliQzV6ZEhsc1pTNWliM0prWlhJZ1BTQW5NWEI0SUhOdmJHbGtJQ05qWTJNbk8xeHVJQ0FnSUNBZ0lDQjBZbXd1YzNSNWJHVXVZbTl5WkdWeVEyOXNiR0Z3YzJVZ1BTQW5ZMjlzYkdGd2MyVW5PMXh1SUNBZ0lDQWdJQ0IwWW13dWFXUWdQU0JjSW5SaFlteGxYMk55WldGMFpXUmNJanRjYmx4dUlDQWdJQ0FnSUNCMllYSWdkSEpmZEdobFlXUWdQU0IwWW13dWFXNXpaWEowVW05M0tDazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnTVRBN0lDc3JhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSb0lEMGdkSEpmZEdobFlXUXVhVzV6WlhKMFEyVnNiQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2d1YzNSNWJHVXVjR0ZrWkdsdVp5QTlJQ2N4TUhCNEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb0xuTjBlV3hsTG1KaFkydG5jbTkxYm1RZ1BTQW5JMll3WmpCbU1DYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFDNXpkSGxzWlM1bWIyNTBWMlZwWjJoMElEMGdKMkp2YkdRbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDQnBJQ0U5SURrZ0tTQjBhQzV6ZEhsc1pTNWliM0prWlhKU2FXZG9kQ0E5SUNjeGNIZ2djMjlzYVdRZ0kyTmpZeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm1GdFpTQTlJR2tnUFQwOUlEQWdQeUFuNmFHNTU1dXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJwSUQwOVBTQXhJRDhnSitXdGtPUzd1K1dLb1NkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FTQTlQVDBnTWlBL0lDZmt2SmpsaFlnblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHa2dQVDA5SURNZ1B5QW41YnlBNVkrUkp5QmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dhU0E5UFQwZ05DQS9JQ2ZtdFl2b3I1VW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR2tnUFQwOUlEVWdQeUFuNUxpSzU3cS9KMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJwSUQwOVBTQTJJRDhnSithS2dPYWNyK1M2dWlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FTQTlQVDBnTnlBL0lDZFJRU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nYVNBOVBUMGdPQ0EvSUNma3VxZmxrNEVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdrZ1BUMDlJRGtnUHlBbjVhU0g1ck9vSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb0xtRndjR1Z1WkVOb2FXeGtLR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtHNWhiV1VwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWkdGMFlTNXNaVzVuZEdnN0lDc3JhU2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSeUlEMGdkR0pzTG1sdWMyVnlkRkp2ZHlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdLQ0JwSUNVZ01pQTlQVDBnTUNBcElIUnlMbk4wZVd4bExtSmhZMnRuY205MWJtUWdQU0FuSTJWbFpTYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNpNXpkSGxzWlM1aWIzSmtaWEpVYjNBZ1BTQW5NWEI0SUhOdmJHbGtJQ05qWTJNbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQTdJR29nUENBeE1Ec2dLeXRxS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJrSUQwZ2RISXVhVzV6WlhKMFEyVnNiQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSa0xuTjBlV3hsTG5CaFpHUnBibWNnUFNBbk1UQndlQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDQnFJQ0U5UFNBNUlDa2dkR1F1YzNSNWJHVXVZbTl5WkdWeVVtbG5hSFFnUFNBbk1YQjRJSE52Ykdsa0lDTmpZMk1uTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSa0xuTjBlV3hsTG0xaGVGZHBaSFJvSUQwZ0p6TXdNSEI0Snp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hajR5SUNZbUlHbzhOaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaQzV2Ym1Oc2FXTnJJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMzUjViR1V1WW1GamEyZHliM1Z1WkNBOVBTQW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSNWJHVXVZbUZqYTJkeWIzVnVaQ0E5SUNkeVoySmhLRE0xTENBeU1UZ3NJRFV6TENBd0xqWXBKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxuTjBlV3hsTG1KaFkydG5jbTkxYm1RZ1BUMGdKM0puWW1Fb016VXNJREl4T0N3Z05UTXNJREF1TmlrbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkSGxzWlM1aVlXTnJaM0p2ZFc1a0lEMGdKM0puWW1Fb01qVTFMQ0ExTVN3Z05URXNJREF1TmlrblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YzNSNWJHVXVZbUZqYTJkeWIzVnVaQ0E5UFNBbmNtZGlZU2d5TlRVc0lEVXhMQ0ExTVN3Z01DNDJLU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGVXeGxMbUpoWTJ0bmNtOTFibVFnUFNBbmNtZGlZU2d5TURrc0lESXlOaXdnTVRVc0lEQXVOaWtuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVjM1I1YkdVdVltRmphMmR5YjNWdVpDQTlQU0FuY21kaVlTZ3lNRGtzSURJeU5pd2dNVFVzSURBdU5pa25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhsc1pTNWlZV05yWjNKdmRXNWtJRDBnSnlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc0xuUmxlSFJEYjI1MFpXNTBJRDBnSnp4MFlXSnNaVDRuSzJSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2QwWVdKc1pWOWpjbVZoZEdWa0p5a3VhVzV1WlhKSVZFMU1LeWM4TDNSaFlteGxQaWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc1aGJXVWdQU0JxSUQwOVBTQXdJRDhnSjNCeWIyb25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR29nUFQwOUlERWdQeUFuYzNWaWNISnZhaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nYWlBOVBUMGdNaUEvSUNkd2NtbHZjbWwwZVNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FpQTlQVDBnTXlBL0lDZDBaV05vWDNRbklGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQnFJRDA5UFNBMElEOGdKM0ZoWDNRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHb2dQVDA5SURVZ1B5QW5jSFZpSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCcUlEMDlQU0EySUQ4Z0oyeGxZV1JsY2lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FpQTlQVDBnTnlBL0lDZHhZU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nYWlBOVBUMGdPQ0EvSUNkd2NtOWtKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJxSUQwOVBTQTVJRDhnSjI1dmRHVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSa0xtbHVibVZ5U0ZSTlRDQTlJR1JoZEdGYmFWMWJibUZ0WlYwdWRHOVRkSEpwYm1jb0tTNXlaWEJzWVdObEtDOWNYRnhjYmk5bkxDQW5QR0p5UGljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0Nkd2NtVjJhV1YzSnlrdVlYQndaVzVrUTJocGJHUW9kR0pzS1R0Y2JpQWdJQ0FnSUNBZ1pXd3VkR1Y0ZEVOdmJuUmxiblFnUFNBblBIUmhZbXhsUGljclpHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjNSaFlteGxYMk55WldGMFpXUW5LUzVwYm01bGNraFVUVXdySnp3dmRHRmliR1UrSnp0Y2JpQWdJQ0I5WEc0Z0lDQWdjMkYyWlNnZ1pTQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBZV0pzWlVOeVpXRjBaU2dnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9KM0psYzNWc2RITW5LU0FzSUhSb2FYTXVjM1JoZEdVdWNtOTNSR0YwWVNrN1hHNGdJQ0FnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRUp2Wkhsek8xeHVJbDE5IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH07XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX1JlYWN0JENvbXBvbmVudCk7XG5cbnZhciBfUmFpc2VkQnV0dG9uJFRleHRGaWVsZCA9IHJlcXVpcmUoJ21hdGVyaWFsLXVpJyk7XG5cbnZhciBGb3JtcyA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIEZvcm1zKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3Jtcyk7XG5cbiAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9ybXMucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEZvcm1zLCBfQ29tcG9uZW50KTtcblxuICAgIF9jcmVhdGVDbGFzcyhGb3JtcywgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlU3VibWl0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZVN1Ym1pdChlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlQ2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUNoYW5nZShlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgICAgICAgICAgdmFyIGl0ZW1zX2lucHV0cyA9IHRoaXMucHJvcHMuaW5wdXRzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIChpdGVtLnR5cGUgPT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gPFRleHRGaWVsZCBtdWx0aUxpbmU9e3RydWV9IGtleT17aX0gaGludFRleHQ9e2l0ZW0udmFsdWVzfSBmbG9hdGluZ0xhYmVsVGV4dD17aXRlbS50ZXh0fSB2YWx1ZT17IGl0ZW0udmFsdWVzICB9IG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSB9IC8+XG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9SYWlzZWRCdXR0b24kVGV4dEZpZWxkLlRleHRGaWVsZCwgeyBrZXk6IGksIGhpbnRUZXh0OiBpdGVtLnZhbHVlcywgZmxvYXRpbmdMYWJlbFRleHQ6IGl0ZW0udGV4dCwgdmFsdWU6IGl0ZW0udmFsdWVzLCBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSB9KVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZm9ybScsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250ZW50cycsIG9uU3VibWl0OiB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpIH0sXG4gICAgICAgICAgICAgICAgaXRlbXNfaW5wdXRzLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzLmlzU2VsZWN0ZWQgPT09ICdudW1iZXInID8gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9SYWlzZWRCdXR0b24kVGV4dEZpZWxkLlJhaXNlZEJ1dHRvbiwgeyBsYWJlbDogJ+S/ruaUuScgfSkgOiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1JhaXNlZEJ1dHRvbiRUZXh0RmllbGQuUmFpc2VkQnV0dG9uLCB7IGxhYmVsOiAn5aKe5YqgJywgc2Vjb25kYXJ5OiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBGb3Jtcztcbn0pKF9SZWFjdCRDb21wb25lbnQuQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gRm9ybXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5bWIzSnRjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPeXRDUVVOcFF5eGpRVUZqT3pzN08zTkRRVXQ0UXl4aFFVRmhPenRKUVVWa0xFdEJRVXM3UVVGRlNTeGhRVVpVTEV0QlFVc3NRMEZGU3l4TFFVRkxMRVZCUVVVN09FSkJSbXBDTEV0QlFVczdPMEZCUjBnc2JVTkJTRVlzUzBGQlN5dzJRMEZIUnl4TFFVRkxMRVZCUVVVN1MwRkRhRUk3TzJOQlNrTXNTMEZCU3pzN2FVSkJRVXdzUzBGQlN6czdaVUZOU3l4elFrRkJSU3hEUVVGRExFVkJRVWM3UVVGRFpDeG5Ra0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUTNCRE96czdaVUZGVnl4elFrRkJSU3hEUVVGRExFVkJRVWM3UVVGRFpDeG5Ra0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUTNCRE96czdaVUZGU3l4clFrRkJSenM3UVVGRlRDeG5Ra0ZCU1N4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJUczdPenRCUVVsd1JDeDFRa0ZCVHl4dFJVRjJRbTVDTEZOQlFWTXNTVUYxUW5GQ0xFZEJRVWNzUlVGQlJTeERRVUZETEVGQlFVTXNSVUZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUVVGQlF5eEZRVUZETEdsQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVGQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUVVGQlJ5eEZRVUZETEZGQlFWRXNSVUZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRVUZCUlN4SFFVRkhPenRwUWtGQlFUdGhRVVY2U2l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVZVTEcxQ1FVRlBPenRyUWtGQlRTeFRRVUZUTEVWQlFVTXNWVUZCVlN4RlFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1FVRkJRenRuUWtGRGNFVXNXVUZCV1R0blFrRkRZanM3TzI5Q1FVTkRMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEV0QlFVc3NVVUZCVVN4SFFVRkhMRzFGUVM5Q2NrUXNXVUZCV1N4SlFTdENkVVFzUzBGQlN5eEZRVUZETEVsQlFVa3NSMEZCUnl4SFFVRkhMRzFGUVM5Q2JrWXNXVUZCV1N4SlFTdENjVVlzUzBGQlN5eEZRVUZETEVsQlFVa3NSVUZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hCUVVGRExFZEJRVWM3YVVKQlEycElPMkZCUTBnc1EwRkJRVHRUUVVOV096czdWMEU1UWtNc1MwRkJTenR2UWtGUVN5eFRRVUZUT3p0eFFrRjNRMVlzUzBGQlN5SXNJbVpwYkdVaU9pSXZRWEJ3YkdsallYUnBiMjV6TDFoQlRWQlFMM2hoYlhCd1ptbHNaWE12YUhSa2IyTnpMMnhsWVhKdVVFaFFMM0IxWW14cFl5OTNaV1ZyYkhrdmMzSmpMMk52YlhCdmJtVnVkSE12Wm05eWJYTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY2JtbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQzloWkdSdmJuTW5PMXh1WEc1cGJYQnZjblFnZTF4dUlDQWdJRkpoYVhObFpFSjFkSFJ2Yml4Y2JpQWdJQ0JVWlhoMFJtbGxiR1JjYm4wZ1puSnZiU0FuYldGMFpYSnBZV3d0ZFdrbk8xeHVYRzVqYkdGemN5QkdiM0p0Y3lCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lod2NtOXdjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUdoaGJtUnNaVk4xWW0xcGRDZ2daU0FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NW9ZVzVrYkdWVGRXSnRhWFFvWlN3Z2RHaHBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhR0Z1Wkd4bFEyaGhibWRsS0NCbElDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1oaGJtUnNaVU5vWVc1blpTaGxMQ0IwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpXNWtaWElvS1NCN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdsMFpXMXpYMmx1Y0hWMGN5QTlJSFJvYVhNdWNISnZjSE11YVc1d2RYUnpMbTFoY0NobWRXNWpkR2x2YmlnZ2FYUmxiU3dnYVNBcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdLR2wwWlcwdWRIbHdaU0E5UFNBbmRHVjRkR0Z5WldFbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnY21WMGRYSnVJRHhVWlhoMFJtbGxiR1FnYlhWc2RHbE1hVzVsUFh0MGNuVmxmU0JyWlhrOWUybDlJR2hwYm5SVVpYaDBQWHRwZEdWdExuWmhiSFZsYzMwZ1pteHZZWFJwYm1kTVlXSmxiRlJsZUhROWUybDBaVzB1ZEdWNGRIMGdkbUZzZFdVOWV5QnBkR1Z0TG5aaGJIVmxjeUFnZlNCdmJrTm9ZVzVuWlQxN0lIUm9hWE11YUdGdVpHeGxRMmhoYm1kbExtSnBibVFvZEdocGN5a2dmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdQRlJsZUhSR2FXVnNaQ0JyWlhrOWUybDlJR2hwYm5SVVpYaDBQWHRwZEdWdExuWmhiSFZsYzMwZ1pteHZZWFJwYm1kTVlXSmxiRlJsZUhROWUybDBaVzB1ZEdWNGRIMGdkbUZzZFdVOWV5QnBkR1Z0TG5aaGJIVmxjeUFnZlNCdmJrTm9ZVzVuWlQxN0lIUm9hWE11YUdGdVpHeGxRMmhoYm1kbExtSnBibVFvZEdocGN5a2dmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZlZ4dUlDQWdJQ0FnSUNCOUxDQjBhR2x6S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1BHWnZjbTBnWTJ4aGMzTk9ZVzFsUFZ3aVkyOXVkR1Z1ZEhOY0lpQnZibE4xWW0xcGREMTdkR2hwY3k1b1lXNWtiR1ZUZFdKdGFYUXVZbWx1WkNoMGFHbHpLWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdhWFJsYlhOZmFXNXdkWFJ6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwZVhCbGIyWWdkR2hwY3k1d2NtOXdjeTVwYzFObGJHVmpkR1ZrSUQwOVBTQW5iblZ0WW1WeUp5QS9JRHhTWVdselpXUkNkWFIwYjI0Z2JHRmlaV3c5SitTL3J1YVV1U2NnTHo0Z09pQThVbUZwYzJWa1FuVjBkRzl1SUd4aFltVnNQU2Zsb3A3bGlxQW5JSE5sWTI5dVpHRnllVDE3ZEhKMVpYMGdMejRnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZabTl5YlQ1Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFWnZjbTF6TzF4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH07XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQgPSByZXF1aXJlKFwicmVhY3QvYWRkb25zXCIpO1xuXG52YXIgX1JlYWN0JENvbXBvbmVudDIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfUmVhY3QkQ29tcG9uZW50KTtcblxudmFyIEhlYWRlciA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIEhlYWRlcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWRlcik7XG5cbiAgICAgICAgaWYgKF9Db21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEhlYWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBfY3JlYXRlQ2xhc3MoSGVhZGVyLCBbe1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9LFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBcImgzXCIsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwicmVhY3RqcyDniYggLSDlkajmiqXnlJ/miJDlmahcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSGVhZGVyO1xufSkoX1JlYWN0JENvbXBvbmVudC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEhlYWRlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5QmNIQnNhV05oZEdsdmJuTXZXRUZOVUZBdmVHRnRjSEJtYVd4bGN5OW9kR1J2WTNNdmJHVmhjbTVRU0ZBdmNIVmliR2xqTDNkbFpXdHNlUzl6Y21NdlkyOXRjRzl1Wlc1MGN5OW9aV0ZrWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3SzBKQlEybERMR05CUVdNN096czdTVUZGZWtNc1RVRkJUVHRoUVVGT0xFMUJRVTA3T0VKQlFVNHNUVUZCVFRzN096czdPenRqUVVGT0xFMUJRVTA3TzJsQ1FVRk9MRTFCUVUwN08yVkJSVVlzYTBKQlFVYzdRVUZEVEN4dFFrRkJUenM3YTBKQlFVc3NVMEZCVXl4RlFVRkRMRkZCUVZFN1owSkJRekZDT3pzN08ybENRVUV3UWp0aFFVTjRRaXhEUVVGQk8xTkJRMVE3T3p0WFFVNURMRTFCUVUwN2IwSkJSa2tzVTBGQlV6czdjVUpCV1ZZc1RVRkJUU0lzSW1acGJHVWlPaUl2UVhCd2JHbGpZWFJwYjI1ekwxaEJUVkJRTDNoaGJYQndabWxzWlhNdmFIUmtiMk56TDJ4bFlYSnVVRWhRTDNCMVlteHBZeTkzWldWcmJIa3ZjM0pqTDJOdmJYQnZibVZ1ZEhNdmFHVmhaR1Z5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYRzVwYlhCdmNuUWdVbVZoWTNRc0lIc2dRMjl0Y0c5dVpXNTBJSDBnWm5KdmJTQW5jbVZoWTNRdllXUmtiMjV6Snp0Y2JseHVZMnhoYzNNZ1NHVmhaR1Z5SUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwSUh0Y2JseHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpYUdWaFpHVnlYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQThhRE0rY21WaFkzUnFjeURuaVlnZ0xTRGxrYWptaXFYbmxKL21pSkRsbWFnOEwyZ3pQbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNCOVhHNWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnU0dWaFpHVnlPMXh1SWwxOSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9O1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfUmVhY3QkQ29tcG9uZW50ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG5cbnZhciBfUmVhY3QkQ29tcG9uZW50MiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9SZWFjdCRDb21wb25lbnQpO1xuXG52YXIgX0ZsYXRCdXR0b24gPSByZXF1aXJlKCdtYXRlcmlhbC11aScpO1xuXG52YXIgVHJzID0gKGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgZnVuY3Rpb24gVHJzKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcnMpO1xuXG4gICAgICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFRycy5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoVHJzLCBfQ29tcG9uZW50KTtcblxuICAgIF9jcmVhdGVDbGFzcyhUcnMsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RJdGVtKHRoaXMsIGUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVEZWxldGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRGVsZXRlKGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGVsZXRlSXRlbSh0aGlzLCBlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3RyJyxcbiAgICAgICAgICAgICAgICB7IGtleTogdGhpcy5wcm9wcy5pdGVtLmlkLCBvbkNsaWNrOiB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuaXNTZWxlY3RlZCA9PT0gdGhpcy5wcm9wcy5pdGVtLmlkID8gJ3NlbGVjdGVkJyA6ICcnIH0sXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucHJvalxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0uc3VicHJvalxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucHJpb3JpdHlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ3RkJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pdGVtLnRlY2hfdFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucWFfdFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucHViXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbS5sZWFkZXJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ3RkJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pdGVtLnFhXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbS5wcm9kXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbS5ub3RlXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfRmxhdEJ1dHRvbi5GbGF0QnV0dG9uLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlRGVsZXRlLmJpbmQodGhpcyksIGxhYmVsOiAn5Yig6ZmkJywgcHJpbWFyeTogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVHJzO1xufSkoX1JlYWN0JENvbXBvbmVudC5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBUcnM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5MGNuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096c3JRa0ZEYVVNc1kwRkJZenM3T3pzd1FrRkZjRUlzWVVGQllUczdTVUZGYkVNc1IwRkJSenRCUVVWTkxHRkJSbFFzUjBGQlJ5eERRVVZQTEV0QlFVc3NSVUZCUlRzNFFrRkdha0lzUjBGQlJ6czdRVUZIUkN4dFEwRklSaXhIUVVGSExEWkRRVWRMTEV0QlFVc3NSVUZCUlR0TFFVTm9RanM3WTBGS1F5eEhRVUZIT3p0cFFrRkJTQ3hIUVVGSE96dGxRVTFQTEhOQ1FVRkZMRU5CUVVNc1JVRkJSenRCUVVOa0xHZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYkVNN096dGxRVVZYTEhOQ1FVRkZMRU5CUVVNc1JVRkJSenRCUVVOa0xHZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYkVNN096dGxRVVZMTEd0Q1FVRkhPMEZCUTB3c2JVSkJRVkU3TzJ0Q1FVRkpMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRUZCUVVNc1JVRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFRkJRVU1zUlVGQlF5eFRRVUZUTEVWQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFdEJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTEVGQlFVVTdaMEpCUTNCS096czdiMEpCUVVzc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1R0cFFrRkJUVHRuUWtGREwwSTdPenR2UWtGQlN5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUE8ybENRVUZOTzJkQ1FVTnNRenM3TzI5Q1FVRkxMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRTdhVUpCUVUwN1owSkJRMjVET3pzN2IwSkJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUVHRwUWtGQlRUdG5Ra0ZEYWtNN096dHZRa0ZCU3l4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTzJsQ1FVRk5PMmRDUVVNdlFqczdPMjlDUVVGTExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjN2FVSkJRVTA3WjBKQlF6bENPenM3YjBKQlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRUdHBRa0ZCVFR0blFrRkRha003T3p0dlFrRkJTeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMmxDUVVGTk8yZENRVU0zUWpzN08yOUNRVUZMTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWs3YVVKQlFVMDdaMEpCUXk5Q096czdiMEpCUVVzc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1R0cFFrRkJUVHRuUWtGREwwSTdPenR2UWtGQlNTeDFSRUUxUWxBc1ZVRkJWU3hKUVRSQ1V5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVGQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVNc1NVRkJTU3hGUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVGQlFVTXNSMEZCUnp0cFFrRkJTenRoUVVOMlJpeERRVUZETzFOQlExUTdPenRYUVRWQ1F5eEhRVUZITzI5Q1FVcFBMRk5CUVZNN08zRkNRVzFEVml4SFFVRkhJaXdpWm1sc1pTSTZJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5MGNuTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY2JtbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQzloWkdSdmJuTW5PMXh1WEc1cGJYQnZjblFnZXlCR2JHRjBRblYwZEc5dUlIMGdabkp2YlNBbmJXRjBaWEpwWVd3dGRXa25PMXh1WEc1amJHRnpjeUJVY25NZ1pYaDBaVzVrY3lCRGIyMXdiMjVsYm5RZ2UxeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb2NISnZjSE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2hoYm1Sc1pVTm9ZVzVuWlNnZ1pTQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JKZEdWdEtIUm9hWE1zSUdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQm9ZVzVrYkdWRVpXeGxkR1VvSUdVZ0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11WkdWc1pYUmxTWFJsYlNoMGFHbHpMQ0JsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvUEhSeUlHdGxlVDE3ZEdocGN5NXdjbTl3Y3k1cGRHVnRMbWxrZlNCdmJrTnNhV05yUFh0MGFHbHpMbWhoYm1Sc1pVTm9ZVzVuWlM1aWFXNWtLSFJvYVhNcGZTQmpiR0Z6YzA1aGJXVTlleUIwYUdsekxuQnliM0J6TG1selUyVnNaV04wWldRZ1BUMDlJSFJvYVhNdWNISnZjSE11YVhSbGJTNXBaQ0EvSUNkelpXeGxZM1JsWkNjZ09pQW5KeUI5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1Y0hKdmFuMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1YzNWaWNISnZhbjA4TDNSa1BseHVJQ0FnSUNBZ0lDQWdJQ0FnUEhSa1BudDBhR2x6TG5CeWIzQnpMbWwwWlcwdWNISnBiM0pwZEhsOVBDOTBaRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeDBaRDU3ZEdocGN5NXdjbTl3Y3k1cGRHVnRMblJsWTJoZmRIMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1Y1dGZmRIMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1Y0hWaWZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErZTNSb2FYTXVjSEp2Y0hNdWFYUmxiUzVzWldGa1pYSjlQQzkwWkQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHgwWkQ1N2RHaHBjeTV3Y205d2N5NXBkR1Z0TG5GaGZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErZTNSb2FYTXVjSEp2Y0hNdWFYUmxiUzV3Y205a2ZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErZTNSb2FYTXVjSEp2Y0hNdWFYUmxiUzV1YjNSbGZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErUEVac1lYUkNkWFIwYjI0Z2IyNURiR2xqYXoxN2RHaHBjeTVvWVc1a2JHVkVaV3hsZEdVdVltbHVaQ2gwYUdsektYMGdiR0ZpWld3OVhDTGxpS0RwbWFSY0lpQndjbWx0WVhKNVBYdDBjblZsZlNBdlBqd3ZkR1ErWEc0Z0lDQWdJQ0FnSUR3dmRISStLVnh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVkhKek8xeHVJbDE5Il19
