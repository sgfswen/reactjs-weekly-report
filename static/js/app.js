(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _injectTapEventPlugin = require('react-tap-event-plugin');

var _injectTapEventPlugin2 = _interopRequireWildcard(_injectTapEventPlugin);

var _Header = require('./components/header');

var _Header2 = _interopRequireWildcard(_Header);

var _Bodys = require('./components/bodys');

var _Bodys2 = _interopRequireWildcard(_Bodys);

_injectTapEventPlugin2['default']();

var App = (function (_Component) {
    function App(props) {
        _classCallCheck(this, App);

        _get(Object.getPrototypeOf(App.prototype), 'constructor', this).call(this, props);
        this.state = {
            initdata: {
                rowData: window.localStorage.rowData ? JSON.parse(window.localStorage.rowData) : [],
                inputData: [{
                    type: 'text',
                    values: '例：后台项目',
                    text: '项目'
                }, {
                    type: 'text',
                    values: 'A',
                    text: '子任务'
                }, {
                    type: 'text',
                    values: 'A',
                    text: '优先'
                }, {
                    type: 'text',
                    values: '7/20',
                    text: '开发'
                }, {
                    type: 'text',
                    values: '12/12',
                    text: '测试'
                }, {
                    type: 'text',
                    values: '12/12',
                    text: '上线'
                }, {
                    type: 'text',
                    values: '小a',
                    text: '技术人'
                }, {
                    type: 'text',
                    values: '小b',
                    text: 'QA'
                }, {
                    type: 'text',
                    values: '小s',
                    text: '产品'
                }, {
                    type: 'textarea',
                    values: 'delay了',
                    text: '备注'
                }]
            }
        };
    }

    _inherits(App, _Component);

    _createClass(App, [{
        key: 'render',
        value: function render() {
            return _React$Component2['default'].createElement(
                'div',
                null,
                _React$Component2['default'].createElement(_Header2['default'], null),
                _React$Component2['default'].createElement(
                    'div',
                    { className: 'bodys' },
                    _React$Component2['default'].createElement(_Bodys2['default'], { init: this.state.initdata })
                )
            );
        }
    }]);

    return App;
})(_React$Component.Component);

_React$Component2['default'].render(_React$Component2['default'].createElement(App, null), document.getElementById('root'));


},{"./components/bodys":2,"./components/header":4,"react-tap-event-plugin":"react-tap-event-plugin","react/addons":"react/addons"}],2:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _RaisedButton = require('material-ui');

var _Forms = require('./forms');

var _Forms2 = _interopRequireWildcard(_Forms);

var _Trs = require('./trs');

var _Trs2 = _interopRequireWildcard(_Trs);

var Bodys = (function (_Component) {
    function Bodys(props) {
        _classCallCheck(this, Bodys);

        _get(Object.getPrototypeOf(Bodys.prototype), 'constructor', this).call(this, props);
        this.state = this.props.init;
    }

    _inherits(Bodys, _Component);

    _createClass(Bodys, [{
        key: 'render',
        value: function render() {

            var _forms = _React$Component2['default'].createElement(_Forms2['default'], { inputs: this.state.inputData });
            var forms = _React$Component2['default'].addons.cloneWithProps(_forms, {
                isSelected: this.state.isSelected,
                handleSubmit: this.handleSubmit.bind(this),
                handleChange: this.handleChange.bind(this)
            });

            var theads = this.state.inputData.slice(0);
            theads.push({ text: '操作' });
            var thead = theads.map(function (item, i) {
                return _React$Component2['default'].createElement(
                    'th',
                    { key: i },
                    item.text
                );
            });

            var items_trs = this.state.rowData.map(function (item, i) {
                item.id = i;
                return _React$Component2['default'].createElement(_Trs2['default'], { key: i, item: item });
            });

            var items = items_trs.map(function (item, i) {
                return _React$Component2['default'].addons.cloneWithProps(item, {
                    isSelected: this.state.isSelected,
                    selectItem: this.selectItem.bind(this),
                    deleteItem: this.deleteItem.bind(this)
                });
            }, this);

            return _React$Component2['default'].createElement(
                'div',
                { className: 'user-detail' },
                forms,
                _React$Component2['default'].createElement(
                    'div',
                    { className: 'tableDiv' },
                    _React$Component2['default'].createElement(
                        'table',
                        { className: 'uk-table uk-table-striped uk-text-left' },
                        _React$Component2['default'].createElement(
                            'thead',
                            null,
                            _React$Component2['default'].createElement(
                                'tr',
                                null,
                                thead
                            )
                        ),
                        _React$Component2['default'].createElement(
                            'tbody',
                            null,
                            items
                        )
                    ),
                    _React$Component2['default'].createElement(
                        'div',
                        { className: 'export' },
                        _React$Component2['default'].createElement(_RaisedButton.RaisedButton, { label: '导出为table', primary: true, onClick: this.save.bind(this) })
                    )
                )
            );
        }
    }, {
        key: 'selectItem',

        // <pre><code>{JSON.stringify(this.state.rowData, null, '\t')}</code></pre>
        // <div><RaisedButton label='保存到 localstorage' primary={true} onClick={this.save.bind(this)} /></div>
        value: function selectItem(item, event) {
            var _inputs = this.state.inputData.slice(0);
            _inputs[0].values = item.props.item.proj;
            _inputs[1].values = item.props.item.subproj;
            _inputs[2].values = item.props.item.priority;
            _inputs[3].values = item.props.item.tech_t;
            _inputs[4].values = item.props.item.qa_t;
            _inputs[5].values = item.props.item.pub;
            _inputs[6].values = item.props.item.leader;
            _inputs[7].values = item.props.item.qa;
            _inputs[8].values = item.props.item.prod;
            _inputs[9].values = item.props.item.note;
            var _isSelected = item.props.item.id === item.props.isSelected ? false : item.props.item.id;
            if (typeof _isSelected === 'number') {
                this.setState({
                    inputData: _inputs,
                    isSelected: _isSelected
                });
            } else {
                this.setState({
                    isSelected: _isSelected
                });
            }
        }
    }, {
        key: 'deleteItem',
        value: function deleteItem(item, event) {
            event.stopPropagation();
            var _items = this.state.rowData;
            _items.splice(item.props.item.id, 1);
            this.setState({ rowData: _items });
            window.localStorage.rowData = JSON.stringify(this.state.rowData);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e, item) {
            var index = Array.prototype.slice.call(e.target.parentNode.parentNode.childNodes).indexOf(e.target.parentNode);
            var _inputs = this.state.inputData.slice(0);
            _inputs[index].values = e.target.value;
            this.setState({ inputData: _inputs });
        }
    }, {
        key: 'handleSubmit',
        value: function handleSubmit(e, forms) {

            e.preventDefault();

            var list = document.querySelector('.contents').querySelectorAll('input');

            // var error = false;

            // Array.prototype.forEach.call(list, function( item ){
            //     if ( item ) {
            //         if ( !item.value ) {
            //             alert('Value should\'n be empty');
            //             error = true;
            //         }
            //     }
            // });

            // if ( !error ) {
            var items = this.state.rowData;
            if (items[forms.props.isSelected]) {
                items[forms.props.isSelected].proj = list[0].value;
                items[forms.props.isSelected].subproj = list[1].value;
                items[forms.props.isSelected].priority = list[2].value;
                items[forms.props.isSelected].tech_t = list[3].value;
                items[forms.props.isSelected].qa_t = list[4].value;
                items[forms.props.isSelected].pub = list[5].value;
                items[forms.props.isSelected].leader = list[6].value;
                items[forms.props.isSelected].qa = list[7].value;
                items[forms.props.isSelected].prod = list[8].value;
                items[forms.props.isSelected].note = list[9].value;
            } else {
                items.push({
                    proj: list[0].value,
                    subproj: list[1].value,
                    priority: list[2].value,
                    tech_t: list[3].value,
                    qa_t: list[4].value,
                    pub: list[5].value,
                    leader: list[6].value,
                    qa: list[7].value,
                    prod: list[8].value,
                    note: list[9].value
                });
            }
            this.setState({ rowData: items });
            window.localStorage.rowData = JSON.stringify(this.state.rowData);
            // }
        }
    }, {
        key: 'tableCreate',
        value: function tableCreate(el, data) {
            document.getElementById('table_created') && document.getElementById('table_created').remove();
            var tbl = document.createElement('table');
            tbl.style.border = '1px solid #ccc';
            tbl.id = 'table_created';

            var tr_thead = tbl.insertRow();
            for (var i = 0; i < 10; ++i) {
                var th = tr_thead.insertCell();
                th.style.padding = '10px';
                th.style.background = '#f0f0f0';
                th.style.fontWeight = 'bold';
                if (i != 9) th.style.borderRight = '1px solid #ccc';
                var name = i === 0 ? '项目' : i === 1 ? '子任务' : i === 2 ? '优先' : i === 3 ? '开发' : i === 4 ? '测试' : i === 5 ? '上线' : i === 6 ? '技术人' : i === 7 ? 'QA' : i === 8 ? '产品' : i === 9 ? '备注' : '';
                th.appendChild(document.createTextNode(name));
            }

            for (var i = 0; i < data.length; ++i) {
                var tr = tbl.insertRow();
                // if ( i % 2 === 0 ) tr.style.background = '#eee';
                tr.style.borderTop = '1px solid #ccc';
                for (var j = 0; j < 10; ++j) {
                    var td = tr.insertCell();
                    td.style.padding = '10px';
                    if (j !== 9) td.style.borderRight = '1px solid #ccc';
                    td.style.maxWidth = '300px';
                    var name = j === 0 ? 'proj' : j === 1 ? 'subproj' : j === 2 ? 'priority' : j === 3 ? 'tech_t' : j === 4 ? 'qa_t' : j === 5 ? 'pub' : j === 6 ? 'leader' : j === 7 ? 'qa' : j === 8 ? 'prod' : j === 9 ? 'note' : '';
                    td.innerHTML = data[i][name].toString().replace(/\\n/g, '<br>');
                }
            }
            document.getElementById('preview').appendChild(tbl);
            el.textContent = '<table>' + document.getElementById('table_created').innerHTML + '</table>';
        }
    }, {
        key: 'save',
        value: function save(e) {
            this.tableCreate(document.getElementById('results'), this.state.rowData);
        }
    }]);

    return Bodys;
})(_React$Component.Component);

exports['default'] = Bodys;
module.exports = exports['default'];


},{"./forms":3,"./trs":5,"material-ui":"material-ui","react/addons":"react/addons"}],3:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _RaisedButton$TextField = require('material-ui');

var Forms = (function (_Component) {
    function Forms(props) {
        _classCallCheck(this, Forms);

        _get(Object.getPrototypeOf(Forms.prototype), 'constructor', this).call(this, props);
    }

    _inherits(Forms, _Component);

    _createClass(Forms, [{
        key: 'handleSubmit',
        value: function handleSubmit(e) {
            this.props.handleSubmit(e, this);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e) {
            this.props.handleChange(e, this);
        }
    }, {
        key: 'render',
        value: function render() {

            var items_inputs = this.props.inputs.map(function (item, i) {
                // if (item.type == 'textarea') {
                //     return <TextField multiLine={true} key={i} hintText={item.values} floatingLabelText={item.text} value={ item.values  } onChange={ this.handleChange.bind(this) } />
                // } else {
                return _React$Component2['default'].createElement(_RaisedButton$TextField.TextField, { key: i, hintText: item.values, floatingLabelText: item.text, value: item.values, onChange: this.handleChange.bind(this) })
                // }
                ;
            }, this);

            return _React$Component2['default'].createElement(
                'form',
                { className: 'contents', onSubmit: this.handleSubmit.bind(this) },
                items_inputs,
                _React$Component2['default'].createElement(
                    'div',
                    null,
                    typeof this.props.isSelected === 'number' ? _React$Component2['default'].createElement(_RaisedButton$TextField.RaisedButton, { label: '修改' }) : _React$Component2['default'].createElement(_RaisedButton$TextField.RaisedButton, { label: '增加', secondary: true })
                )
            );
        }
    }]);

    return Forms;
})(_React$Component.Component);

exports['default'] = Forms;
module.exports = exports['default'];


},{"material-ui":"material-ui","react/addons":"react/addons"}],4:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _React$Component = require("react/addons");

var _React$Component2 = _interopRequireWildcard(_React$Component);

var Header = (function (_Component) {
    function Header() {
        _classCallCheck(this, Header);

        if (_Component != null) {
            _Component.apply(this, arguments);
        }
    }

    _inherits(Header, _Component);

    _createClass(Header, [{
        key: "render",
        value: function render() {
            return _React$Component2["default"].createElement(
                "div",
                { className: "header" },
                _React$Component2["default"].createElement(
                    "h3",
                    null,
                    "reactjs 版 - 周报生成器"
                )
            );
        }
    }]);

    return Header;
})(_React$Component.Component);

exports["default"] = Header;
module.exports = exports["default"];


},{"react/addons":"react/addons"}],5:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _FlatButton = require('material-ui');

var Trs = (function (_Component) {
    function Trs(props) {
        _classCallCheck(this, Trs);

        _get(Object.getPrototypeOf(Trs.prototype), 'constructor', this).call(this, props);
    }

    _inherits(Trs, _Component);

    _createClass(Trs, [{
        key: 'handleChange',
        value: function handleChange(e) {
            this.props.selectItem(this, e);
        }
    }, {
        key: 'handleDelete',
        value: function handleDelete(e) {
            this.props.deleteItem(this, e);
        }
    }, {
        key: 'render',
        value: function render() {
            return _React$Component2['default'].createElement(
                'tr',
                { key: this.props.item.id, onClick: this.handleChange.bind(this), className: this.props.isSelected === this.props.item.id ? 'selected' : '' },
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.proj
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.subproj
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.priority
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.tech_t
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.qa_t
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.pub
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.leader
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.qa
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.prod
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.note
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    _React$Component2['default'].createElement(_FlatButton.FlatButton, { onClick: this.handleDelete.bind(this), label: '删除', primary: true })
                )
            );
        }
    }]);

    return Trs;
})(_React$Component.Component);

exports['default'] = Trs;
module.exports = exports['default'];


},{"material-ui":"material-ui","react/addons":"react/addons"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL2xlYXJuUEhQL3B1YmxpYy93ZWVrbHkvc3JjL2FwcC5qcyIsIi9BcHBsaWNhdGlvbnMvWEFNUFAveGFtcHBmaWxlcy9odGRvY3MvbGVhcm5QSFAvcHVibGljL3dlZWtseS9zcmMvY29tcG9uZW50cy9ib2R5cy5qcyIsIi9BcHBsaWNhdGlvbnMvWEFNUFAveGFtcHBmaWxlcy9odGRvY3MvbGVhcm5QSFAvcHVibGljL3dlZWtseS9zcmMvY29tcG9uZW50cy9mb3Jtcy5qcyIsIi9BcHBsaWNhdGlvbnMvWEFNUFAveGFtcHBmaWxlcy9odGRvY3MvbGVhcm5QSFAvcHVibGljL3dlZWtseS9zcmMvY29tcG9uZW50cy9oZWFkZXIuanMiLCIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL2xlYXJuUEhQL3B1YmxpYy93ZWVrbHkvc3JjL2NvbXBvbmVudHMvdHJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsWUFBWSxDQUFDOztBQUViLElBQUksdUJBQXVCLEdBQUcsVUFBVSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7O0FBRTFHLElBQUksZUFBZSxHQUFHLFVBQVUsUUFBUSxFQUFFLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLFlBQVksV0FBVyxDQUFDLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7O0FBRWpLLElBQUksWUFBWSxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLFVBQVUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxJQUFJLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDOztBQUV0akIsSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENB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QyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3pDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLEdBQUcsSUFB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QUksVUFBVSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLFVBQVUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxJQUFJLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDOztBQUV0akIsSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFLEVBQUUsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLE1BQU0sSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUUsRUFBRSxPQUFPLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFB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QUksWUFBWSxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLFVBQVUsV0FBVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxJQUFJLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDOztBQUV0akIsSUFBSSxTQUFTLEdBQUcsVUFBVSxRQUFRLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLElBQUksVUFBVSxLQUFLLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsMERBQTBELEdBQUcsT0FBTyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxF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LEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUM1STthQUNKLENBQUM7U0FDTDtBQUNULEtBQUssQ0FBQyxDQUFDLENBQUM7O0lBRUosT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7O0FBRS9CLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDekIsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH07XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX1JlYWN0JENvbXBvbmVudCk7XG5cbnZhciBfaW5qZWN0VGFwRXZlbnRQbHVnaW4gPSByZXF1aXJlKCdyZWFjdC10YXAtZXZlbnQtcGx1Z2luJyk7XG5cbnZhciBfaW5qZWN0VGFwRXZlbnRQbHVnaW4yID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2luamVjdFRhcEV2ZW50UGx1Z2luKTtcblxudmFyIF9IZWFkZXIgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvaGVhZGVyJyk7XG5cbnZhciBfSGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9IZWFkZXIpO1xuXG52YXIgX0JvZHlzID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2JvZHlzJyk7XG5cbnZhciBfQm9keXMyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0JvZHlzKTtcblxuX2luamVjdFRhcEV2ZW50UGx1Z2luMlsnZGVmYXVsdCddKCk7XG5cbnZhciBBcHAgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBmdW5jdGlvbiBBcHAocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcCk7XG5cbiAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXBwLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgcHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaW5pdGRhdGE6IHtcbiAgICAgICAgICAgICAgICByb3dEYXRhOiB3aW5kb3cubG9jYWxTdG9yYWdlLnJvd0RhdGEgPyBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2Uucm93RGF0YSkgOiBbXSxcbiAgICAgICAgICAgICAgICBpbnB1dERhdGE6IFt7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiAn5L6L77ya5ZCO5Y+w6aG555uuJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+mhueebridcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiAnQScsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICflrZDku7vliqEnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJ0EnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn5LyY5YWIJ1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICc3LzIwJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+W8gOWPkSdcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiAnMTIvMTInLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn5rWL6K+VJ1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICcxMi8xMicsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICfkuIrnur8nXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJ+Wwj2EnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn5oqA5pyv5Lq6J1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICflsI9iJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1FBJ1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6ICflsI9zJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+S6p+WTgSdcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogJ2RlbGF55LqGJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+Wkh+azqCdcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhBcHAsIF9Db21wb25lbnQpO1xuXG4gICAgX2NyZWF0ZUNsYXNzKEFwcCwgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX0hlYWRlcjJbJ2RlZmF1bHQnXSwgbnVsbCksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdib2R5cycgfSxcbiAgICAgICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9Cb2R5czJbJ2RlZmF1bHQnXSwgeyBpbml0OiB0aGlzLnN0YXRlLmluaXRkYXRhIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBcHA7XG59KShfUmVhY3QkQ29tcG9uZW50LkNvbXBvbmVudCk7XG5cbl9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10ucmVuZGVyKF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChBcHAsIG51bGwpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenNyUWtGRGFVTXNZMEZCWXpzN096dHZRMEZEWkN4M1FrRkJkMEk3T3pzN2MwSkJRM1JETEhGQ1FVRnhRanM3T3p0eFFrRkRkRUlzYjBKQlFXOUNPenM3TzBGQlJYUkRMRzFEUVVGelFpeERRVUZET3p0SlFVVnFRaXhIUVVGSE8wRkJSVTBzWVVGR1ZDeEhRVUZITEVOQlJVOHNTMEZCU3l4RlFVRkZPemhDUVVacVFpeEhRVUZIT3p0QlFVZEVMRzFEUVVoR0xFZEJRVWNzTmtOQlIwc3NTMEZCU3l4RlFVRkZPMEZCUTJJc1dVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ6dEJRVU5VTEc5Q1FVRlJMRVZCUVVNN1FVRkRUQ3gxUWtGQlR5eEZRVUZITEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGTzBGQlEzQkdMSGxDUVVGVExFVkJRVWNzUTBGRFVqdEJRVU5KTEhkQ1FVRkpMRVZCUVVVc1RVRkJUVHRCUVVOYUxEQkNRVUZOTEVWQlFVVXNVVUZCVVR0QlFVTm9RaXgzUWtGQlNTeEZRVUZGTEVsQlFVazdhVUpCUTJJc1JVRkJRenRCUVVORkxIZENRVUZKTEVWQlFVVXNUVUZCVFR0QlFVTmFMREJDUVVGTkxFVkJRVVVzUjBGQlJ6dEJRVU5ZTEhkQ1FVRkpMRVZCUVVVc1MwRkJTenRwUWtGRFpDeEZRVUZETzBGQlEwVXNkMEpCUVVrc1JVRkJSU3hOUVVGTk8wRkJRMW9zTUVKQlFVMHNSVUZCUlN4SFFVRkhPMEZCUTFnc2QwSkJRVWtzUlVGQlJTeEpRVUZKTzJsQ1FVTmlMRVZCUVVNN1FVRkRSU3gzUWtGQlNTeEZRVUZGTEUxQlFVMDdRVUZEV2l3d1FrRkJUU3hGUVVGRkxFMUJRVTA3UVVGRFpDeDNRa0ZCU1N4RlFVRkZMRWxCUVVrN2FVSkJRMklzUlVGQlF6dEJRVU5GTEhkQ1FVRkpMRVZCUVVVc1RVRkJUVHRCUVVOYUxEQkNRVUZOTEVWQlFVVXNUMEZCVHp0QlFVTm1MSGRDUVVGSkxFVkJRVVVzU1VGQlNUdHBRa0ZEWWl4RlFVRkRPMEZCUTBVc2QwSkJRVWtzUlVGQlJTeE5RVUZOTzBGQlExb3NNRUpCUVUwc1JVRkJSU3hQUVVGUE8wRkJRMllzZDBKQlFVa3NSVUZCUlN4SlFVRkpPMmxDUVVOaUxFVkJRVU03UVVGRFJTeDNRa0ZCU1N4RlFVRkZMRTFCUVUwN1FVRkRXaXd3UWtGQlRTeEZRVUZGTEVsQlFVazdRVUZEV2l4M1FrRkJTU3hGUVVGRkxFdEJRVXM3YVVKQlEyUXNSVUZCUXp0QlFVTkZMSGRDUVVGSkxFVkJRVVVzVFVGQlRUdEJRVU5hTERCQ1FVRk5MRVZCUVVVc1NVRkJTVHRCUVVOYUxIZENRVUZKTEVWQlFVVXNTVUZCU1R0cFFrRkRZaXhGUVVGRE8wRkJRMFVzZDBKQlFVa3NSVUZCUlN4TlFVRk5PMEZCUTFvc01FSkJRVTBzUlVGQlJTeEpRVUZKTzBGQlExb3NkMEpCUVVrc1JVRkJSU3hKUVVGSk8ybENRVU5pTEVWQlFVTTdRVUZEUlN4M1FrRkJTU3hGUVVGRkxGVkJRVlU3UVVGRGFFSXNNRUpCUVUwc1JVRkJSU3hSUVVGUk8wRkJRMmhDTEhkQ1FVRkpMRVZCUVVVc1NVRkJTVHRwUWtGRFlpeERRVU5LTzJGQlEwbzdVMEZEU2l4RFFVRkJPMHRCUTBvN08yTkJjRVJETEVkQlFVYzdPMmxDUVVGSUxFZEJRVWM3TzJWQmMwUkRMR3RDUVVGSE8wRkJRMHdzYlVKQlFVODdPenRuUWtGRFNDeHhSVUZCVlR0blFrRkRWanM3YzBKQlFVc3NVMEZCVXl4RlFVRkRMRTlCUVU4N2IwSkJRMnhDTEdsRlFVRlBMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRVUZCUXl4SFFVRkhPMmxDUVVOc1F6dGhRVU5LTEVOQlFVRTdVMEZEVkRzN08xZEJOMFJETEVkQlFVYzdiMEpCVUU4c1UwRkJVenM3UVVGM1JYcENMRFpDUVVGTkxFMUJRVTBzUTBGQlJTd3lRMEZCUXl4SFFVRkhMRTlCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNaUxDSm1hV3hsSWpvaUwwRndjR3hwWTJGMGFXOXVjeTlZUVUxUVVDOTRZVzF3Y0dacGJHVnpMMmgwWkc5amN5OXNaV0Z5YmxCSVVDOXdkV0pzYVdNdmQyVmxhMng1TDNOeVl5OWhjSEF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNibWx0Y0c5eWRDQlNaV0ZqZEN3Z2V5QkRiMjF3YjI1bGJuUWdmU0JtY205dElDZHlaV0ZqZEM5aFpHUnZibk1uTzF4dWFXMXdiM0owSUdsdWFtVmpkRlJoY0VWMlpXNTBVR3gxWjJsdUlHWnliMjBnSjNKbFlXTjBMWFJoY0MxbGRtVnVkQzF3YkhWbmFXNG5PMXh1YVcxd2IzSjBJRWhsWVdSbGNpQm1jbTl0SUNjdUwyTnZiWEJ2Ym1WdWRITXZhR1ZoWkdWeUp6dGNibWx0Y0c5eWRDQkNiMlI1Y3lCbWNtOXRJQ2N1TDJOdmJYQnZibVZ1ZEhNdlltOWtlWE1uTzF4dVhHNXBibXBsWTNSVVlYQkZkbVZ1ZEZCc2RXZHBiaWdwTzF4dVhHNWpiR0Z6Y3lCQmNIQWdaWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0hKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9jSEp2Y0hNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYUmxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVwZEdSaGRHRTZlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2ZDBSaGRHRWdPaUIzYVc1a2IzY3ViRzlqWVd4VGRHOXlZV2RsTG5KdmQwUmhkR0VnUHlCS1UwOU9MbkJoY25ObEtIZHBibVJ2ZHk1c2IyTmhiRk4wYjNKaFoyVXVjbTkzUkdGMFlTa2dPaUJiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkRVJoZEdFZ09pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2QwWlhoMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsY3pvZ0orUytpKys4bXVXUWp1V1BzT21odWVlYnJpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lBbjZhRzU1NXV1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZDBaWGgwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxjem9nSjBFbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nSitXdGtPUzd1K1dLb1NkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5kR1Y0ZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE02SUNkQkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFE2SUNma3ZKamxoWWduWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozUmxlSFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpPaUFuTnk4eU1DY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lBbjVieUE1WStSSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZDBaWGgwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxjem9nSnpFeUx6RXlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRNklDZm10WXZvcjVVblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM1JsZUhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6T2lBbk1USXZNVEluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dKK1M0aXVlNnZ5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuZEdWNGRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlhNNklDZmxzSTloSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJQ2ZtaW9EbW5LL2t1cm9uWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozUmxlSFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpPaUFuNWJDUFlpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lBblVVRW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjNSbGVIUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWek9pQW41YkNQY3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUFuNUxxbjVaT0JKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkMFpYaDBZWEpsWVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaWE02SUNka1pXeGhlZVM2aGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUFuNWFTSDVyT29KMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WdVpHVnlLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnUEdScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR4SVpXRmtaWElnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lZbTlrZVhOY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThRbTlrZVhNZ2FXNXBkRDE3ZEdocGN5NXpkR0YwWlM1cGJtbDBaR0YwWVgwZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNGdJRnh1SUNBZ0lIMWNibHh1ZlZ4dVhHNVNaV0ZqZEM1eVpXNWtaWElvSUR4QmNIQWdMejRzSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R5YjI5MEp5a2dLVHRjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfTtcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1JlYWN0JENvbXBvbmVudCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xuXG52YXIgX1JlYWN0JENvbXBvbmVudDIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfUmVhY3QkQ29tcG9uZW50KTtcblxudmFyIF9SYWlzZWRCdXR0b24gPSByZXF1aXJlKCdtYXRlcmlhbC11aScpO1xuXG52YXIgX0Zvcm1zID0gcmVxdWlyZSgnLi9mb3JtcycpO1xuXG52YXIgX0Zvcm1zMiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9Gb3Jtcyk7XG5cbnZhciBfVHJzID0gcmVxdWlyZSgnLi90cnMnKTtcblxudmFyIF9UcnMyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX1Rycyk7XG5cbnZhciBCb2R5cyA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIEJvZHlzKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb2R5cyk7XG5cbiAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm9keXMucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb3BzLmluaXQ7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEJvZHlzLCBfQ29tcG9uZW50KTtcblxuICAgIF9jcmVhdGVDbGFzcyhCb2R5cywgW3tcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgICAgICAgICAgdmFyIF9mb3JtcyA9IF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfRm9ybXMyWydkZWZhdWx0J10sIHsgaW5wdXRzOiB0aGlzLnN0YXRlLmlucHV0RGF0YSB9KTtcbiAgICAgICAgICAgIHZhciBmb3JtcyA9IF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uYWRkb25zLmNsb25lV2l0aFByb3BzKF9mb3Jtcywge1xuICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IHRoaXMuc3RhdGUuaXNTZWxlY3RlZCxcbiAgICAgICAgICAgICAgICBoYW5kbGVTdWJtaXQ6IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHRoZWFkcyA9IHRoaXMuc3RhdGUuaW5wdXREYXRhLnNsaWNlKDApO1xuICAgICAgICAgICAgdGhlYWRzLnB1c2goeyB0ZXh0OiAn5pON5L2cJyB9KTtcbiAgICAgICAgICAgIHZhciB0aGVhZCA9IHRoZWFkcy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGgnLFxuICAgICAgICAgICAgICAgICAgICB7IGtleTogaSB9LFxuICAgICAgICAgICAgICAgICAgICBpdGVtLnRleHRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBpdGVtc190cnMgPSB0aGlzLnN0YXRlLnJvd0RhdGEubWFwKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5pZCA9IGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfVHJzMlsnZGVmYXVsdCddLCB7IGtleTogaSwgaXRlbTogaXRlbSB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBpdGVtc190cnMubWFwKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uYWRkb25zLmNsb25lV2l0aFByb3BzKGl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZDogdGhpcy5zdGF0ZS5pc1NlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RJdGVtOiB0aGlzLnNlbGVjdEl0ZW0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlSXRlbTogdGhpcy5kZWxldGVJdGVtLmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndXNlci1kZXRhaWwnIH0sXG4gICAgICAgICAgICAgICAgZm9ybXMsXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd0YWJsZURpdicgfSxcbiAgICAgICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndWstdGFibGUgdWstdGFibGUtc3RyaXBlZCB1ay10ZXh0LWxlZnQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoZWFkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0Ym9keScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZXhwb3J0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9SYWlzZWRCdXR0b24uUmFpc2VkQnV0dG9uLCB7IGxhYmVsOiAn5a+85Ye65Li6dGFibGUnLCBwcmltYXJ5OiB0cnVlLCBvbkNsaWNrOiB0aGlzLnNhdmUuYmluZCh0aGlzKSB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2VsZWN0SXRlbScsXG5cbiAgICAgICAgLy8gPHByZT48Y29kZT57SlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5yb3dEYXRhLCBudWxsLCAnXFx0Jyl9PC9jb2RlPjwvcHJlPlxuICAgICAgICAvLyA8ZGl2PjxSYWlzZWRCdXR0b24gbGFiZWw9J+S/neWtmOWIsCBsb2NhbHN0b3JhZ2UnIHByaW1hcnk9e3RydWV9IG9uQ2xpY2s9e3RoaXMuc2F2ZS5iaW5kKHRoaXMpfSAvPjwvZGl2PlxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0SXRlbShpdGVtLCBldmVudCkge1xuICAgICAgICAgICAgdmFyIF9pbnB1dHMgPSB0aGlzLnN0YXRlLmlucHV0RGF0YS5zbGljZSgwKTtcbiAgICAgICAgICAgIF9pbnB1dHNbMF0udmFsdWVzID0gaXRlbS5wcm9wcy5pdGVtLnByb2o7XG4gICAgICAgICAgICBfaW5wdXRzWzFdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5zdWJwcm9qO1xuICAgICAgICAgICAgX2lucHV0c1syXS52YWx1ZXMgPSBpdGVtLnByb3BzLml0ZW0ucHJpb3JpdHk7XG4gICAgICAgICAgICBfaW5wdXRzWzNdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS50ZWNoX3Q7XG4gICAgICAgICAgICBfaW5wdXRzWzRdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5xYV90O1xuICAgICAgICAgICAgX2lucHV0c1s1XS52YWx1ZXMgPSBpdGVtLnByb3BzLml0ZW0ucHViO1xuICAgICAgICAgICAgX2lucHV0c1s2XS52YWx1ZXMgPSBpdGVtLnByb3BzLml0ZW0ubGVhZGVyO1xuICAgICAgICAgICAgX2lucHV0c1s3XS52YWx1ZXMgPSBpdGVtLnByb3BzLml0ZW0ucWE7XG4gICAgICAgICAgICBfaW5wdXRzWzhdLnZhbHVlcyA9IGl0ZW0ucHJvcHMuaXRlbS5wcm9kO1xuICAgICAgICAgICAgX2lucHV0c1s5XS52YWx1ZXMgPSBpdGVtLnByb3BzLml0ZW0ubm90ZTtcbiAgICAgICAgICAgIHZhciBfaXNTZWxlY3RlZCA9IGl0ZW0ucHJvcHMuaXRlbS5pZCA9PT0gaXRlbS5wcm9wcy5pc1NlbGVjdGVkID8gZmFsc2UgOiBpdGVtLnByb3BzLml0ZW0uaWQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIF9pc1NlbGVjdGVkID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpbnB1dERhdGE6IF9pbnB1dHMsXG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IF9pc1NlbGVjdGVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkOiBfaXNTZWxlY3RlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZWxldGVJdGVtJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUl0ZW0oaXRlbSwgZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyIF9pdGVtcyA9IHRoaXMuc3RhdGUucm93RGF0YTtcbiAgICAgICAgICAgIF9pdGVtcy5zcGxpY2UoaXRlbS5wcm9wcy5pdGVtLmlkLCAxKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyByb3dEYXRhOiBfaXRlbXMgfSk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJvd0RhdGEgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnJvd0RhdGEpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVDaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUsIGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzKS5pbmRleE9mKGUudGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgdmFyIF9pbnB1dHMgPSB0aGlzLnN0YXRlLmlucHV0RGF0YS5zbGljZSgwKTtcbiAgICAgICAgICAgIF9pbnB1dHNbaW5kZXhdLnZhbHVlcyA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0RGF0YTogX2lucHV0cyB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlU3VibWl0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChlLCBmb3Jtcykge1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHZhciBsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnRzJykucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcblxuICAgICAgICAgICAgLy8gdmFyIGVycm9yID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobGlzdCwgZnVuY3Rpb24oIGl0ZW0gKXtcbiAgICAgICAgICAgIC8vICAgICBpZiAoIGl0ZW0gKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmICggIWl0ZW0udmFsdWUgKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBhbGVydCgnVmFsdWUgc2hvdWxkXFwnbiBiZSBlbXB0eScpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgICAgIC8vIGlmICggIWVycm9yICkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5zdGF0ZS5yb3dEYXRhO1xuICAgICAgICAgICAgaWYgKGl0ZW1zW2Zvcm1zLnByb3BzLmlzU2VsZWN0ZWRdKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0ucHJvaiA9IGxpc3RbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0uc3VicHJvaiA9IGxpc3RbMV0udmFsdWU7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0ucHJpb3JpdHkgPSBsaXN0WzJdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGl0ZW1zW2Zvcm1zLnByb3BzLmlzU2VsZWN0ZWRdLnRlY2hfdCA9IGxpc3RbM10udmFsdWU7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0ucWFfdCA9IGxpc3RbNF0udmFsdWU7XG4gICAgICAgICAgICAgICAgaXRlbXNbZm9ybXMucHJvcHMuaXNTZWxlY3RlZF0ucHViID0gbGlzdFs1XS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5sZWFkZXIgPSBsaXN0WzZdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGl0ZW1zW2Zvcm1zLnByb3BzLmlzU2VsZWN0ZWRdLnFhID0gbGlzdFs3XS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5wcm9kID0gbGlzdFs4XS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtc1tmb3Jtcy5wcm9wcy5pc1NlbGVjdGVkXS5ub3RlID0gbGlzdFs5XS52YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHByb2o6IGxpc3RbMF0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHN1YnByb2o6IGxpc3RbMV0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiBsaXN0WzJdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0ZWNoX3Q6IGxpc3RbM10udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHFhX3Q6IGxpc3RbNF0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHB1YjogbGlzdFs1XS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbGVhZGVyOiBsaXN0WzZdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBxYTogbGlzdFs3XS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZDogbGlzdFs4XS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbm90ZTogbGlzdFs5XS52YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJvd0RhdGE6IGl0ZW1zIH0pO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yb3dEYXRhID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5yb3dEYXRhKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndGFibGVDcmVhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdGFibGVDcmVhdGUoZWwsIGRhdGEpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZV9jcmVhdGVkJykgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhYmxlX2NyZWF0ZWQnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHZhciB0YmwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICAgICAgdGJsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2NjYyc7XG4gICAgICAgICAgICB0YmwuaWQgPSAndGFibGVfY3JlYXRlZCc7XG5cbiAgICAgICAgICAgIHZhciB0cl90aGVhZCA9IHRibC5pbnNlcnRSb3coKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciB0aCA9IHRyX3RoZWFkLmluc2VydENlbGwoKTtcbiAgICAgICAgICAgICAgICB0aC5zdHlsZS5wYWRkaW5nID0gJzEwcHgnO1xuICAgICAgICAgICAgICAgIHRoLnN0eWxlLmJhY2tncm91bmQgPSAnI2YwZjBmMCc7XG4gICAgICAgICAgICAgICAgdGguc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSA5KSB0aC5zdHlsZS5ib3JkZXJSaWdodCA9ICcxcHggc29saWQgI2NjYyc7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBpID09PSAwID8gJ+mhueebricgOiBpID09PSAxID8gJ+WtkOS7u+WKoScgOiBpID09PSAyID8gJ+S8mOWFiCcgOiBpID09PSAzID8gJ+W8gOWPkScgOiBpID09PSA0ID8gJ+a1i+ivlScgOiBpID09PSA1ID8gJ+S4iue6vycgOiBpID09PSA2ID8gJ+aKgOacr+S6uicgOiBpID09PSA3ID8gJ1FBJyA6IGkgPT09IDggPyAn5Lqn5ZOBJyA6IGkgPT09IDkgPyAn5aSH5rOoJyA6ICcnO1xuICAgICAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5hbWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyID0gdGJsLmluc2VydFJvdygpO1xuICAgICAgICAgICAgICAgIC8vIGlmICggaSAlIDIgPT09IDAgKSB0ci5zdHlsZS5iYWNrZ3JvdW5kID0gJyNlZWUnO1xuICAgICAgICAgICAgICAgIHRyLnN0eWxlLmJvcmRlclRvcCA9ICcxcHggc29saWQgI2NjYyc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxMDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZCA9IHRyLmluc2VydENlbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgdGQuc3R5bGUucGFkZGluZyA9ICcxMHB4JztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogIT09IDkpIHRkLnN0eWxlLmJvcmRlclJpZ2h0ID0gJzFweCBzb2xpZCAjY2NjJztcbiAgICAgICAgICAgICAgICAgICAgdGQuc3R5bGUubWF4V2lkdGggPSAnMzAwcHgnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGogPT09IDAgPyAncHJvaicgOiBqID09PSAxID8gJ3N1YnByb2onIDogaiA9PT0gMiA/ICdwcmlvcml0eScgOiBqID09PSAzID8gJ3RlY2hfdCcgOiBqID09PSA0ID8gJ3FhX3QnIDogaiA9PT0gNSA/ICdwdWInIDogaiA9PT0gNiA/ICdsZWFkZXInIDogaiA9PT0gNyA/ICdxYScgOiBqID09PSA4ID8gJ3Byb2QnIDogaiA9PT0gOSA/ICdub3RlJyA6ICcnO1xuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSBkYXRhW2ldW25hbWVdLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxcXG4vZywgJzxicj4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJldmlldycpLmFwcGVuZENoaWxkKHRibCk7XG4gICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9ICc8dGFibGU+JyArIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZV9jcmVhdGVkJykuaW5uZXJIVE1MICsgJzwvdGFibGU+JztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2F2ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKGUpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGVDcmVhdGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3VsdHMnKSwgdGhpcy5zdGF0ZS5yb3dEYXRhKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCb2R5cztcbn0pKF9SZWFjdCRDb21wb25lbnQuQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQm9keXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5aWIyUjVjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPeXRDUVVOcFF5eGpRVUZqT3pzN096UkNRVVZzUWl4aFFVRmhPenR4UWtGRmVFSXNVMEZCVXpzN096dHRRa0ZGV0N4UFFVRlBPenM3TzBsQlJXcENMRXRCUVVzN1FVRkZTU3hoUVVaVUxFdEJRVXNzUTBGRlN5eExRVUZMTEVWQlFVVTdPRUpCUm1wQ0xFdEJRVXM3TzBGQlIwZ3NiVU5CU0VZc1MwRkJTeXcyUTBGSFJ5eExRVUZMTEVWQlFVVTdRVUZEWWl4WlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkJPMHRCUXk5Q096dGpRVXhETEV0QlFVczdPMmxDUVVGTUxFdEJRVXM3TzJWQlQwUXNhMEpCUVVjN08wRkJSVXdzWjBKQlFVa3NUVUZCVFN4SFFVRkhMR2xGUVVGUExFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1FVRkJReXhIUVVGSExFTkJRVU03UVVGRGNrUXNaMEpCUVVrc1MwRkJTeXhIUVVGSExEWkNRVUZOTEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRelZETERCQ1FVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTzBGQlEycERMRFJDUVVGWkxFVkJRVVVzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRekZETERSQ1FVRlpMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMkZCUXpkRExFTkJRVU1zUTBGQlF6czdRVUZGU0N4blFrRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlF6TkRMR3RDUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE5VSXNaMEpCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGSE8wRkJRM1pETEhWQ1FVRlBPenR6UWtGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXl4QlFVRkRPMjlDUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzJsQ1FVRk5MRU5CUVVNN1lVRkRka01zUTBGQlF5eERRVUZCT3p0QlFVVkdMR2RDUVVGSkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlV5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkRPMEZCUTNCRUxHOUNRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOYUxIVkNRVUZQTEN0RVFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRExFRkJRVU1zUlVGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4QlFVRkRMRWRCUVVjc1EwRkJRVHRoUVVOeVF5eERRVUZETEVOQlFVTTdPMEZCUlVnc1owSkJRVWtzUzBGQlN5eEhRVUZITEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJVeXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZETzBGQlEzWkRMSFZDUVVGUExEWkNRVUZOTEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM0pETERoQ1FVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTzBGQlEycERMRGhDUVVGVkxFVkJRVVVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRM1JETERoQ1FVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMmxDUVVONlF5eERRVUZETEVOQlFVTTdZVUZEVGl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVZVTEcxQ1FVTkpPenRyUWtGQlN5eFRRVUZUTEVWQlFVTXNZVUZCWVR0blFrRkRka0lzUzBGQlN6dG5Ra0ZEVGpzN2MwSkJRVXNzVTBGQlV5eEZRVUZETEZWQlFWVTdiMEpCUTNKQ096c3dRa0ZCVHl4VFFVRlRMRVZCUVVNc2QwTkJRWGRETzNkQ1FVTnlSRHM3T3pSQ1FVTkpPenM3WjBOQlFVc3NTMEZCU3pzMlFrRkJUVHQ1UWtGRFdqdDNRa0ZEVWpzN096UkNRVUZSTEV0QlFVczdlVUpCUVZNN2NVSkJRMnhDTzI5Q1FVTlNPenN3UWtGQlN5eFRRVUZUTEVWQlFVTXNVVUZCVVR0M1FrRkJReXg1UkVGdVJHNURMRmxCUVZrc1NVRnRSSEZETEV0QlFVc3NSVUZCUXl4VlFVRlZMRVZCUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUVVGQlF5eEZRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRVUZCUXl4SFFVRkhPM0ZDUVVGTk8ybENRVU16Unp0aFFVTktMRU5CUTFRN1UwRkRTanM3T3pzN08yVkJSMU1zYjBKQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSenRCUVVOMFFpeG5Ra0ZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRelZETEcxQ1FVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU42UXl4dFFrRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTTdRVUZETlVNc2JVSkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUXpkRExHMUNRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNelF5eHRRa0ZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGVrTXNiVUpCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlEzaERMRzFDUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXpReXh0UWtGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRka01zYlVKQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRM3BETEcxQ1FVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU42UXl4blFrRkJTU3hYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkROVVlzWjBKQlFVc3NUMEZCVHl4WFFVRlhMRXRCUVVzc1VVRkJVU3hGUVVGSE8wRkJRMjVETEc5Q1FVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRMVlzTmtKQlFWTXNSVUZCUlN4UFFVRlBPMEZCUTJ4Q0xEaENRVUZWTEVWQlFVVXNWMEZCVnp0cFFrRkRNVUlzUTBGQlF5eERRVUZETzJGQlEwNHNUVUZCVFR0QlFVTklMRzlDUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlExWXNPRUpCUVZVc1JVRkJSU3hYUVVGWE8ybENRVU14UWl4RFFVRkRMRU5CUVVFN1lVRkRURHRUUVVOS096czdaVUZGVXl4dlFrRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eEZRVUZITzBGQlEzUkNMR2xDUVVGTExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdRVUZEZUVJc1owSkJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRE8wRkJRMmhETEd0Q1FVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVVVzUTBGQlF6dEJRVU4yUXl4blFrRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEU5QlFVOHNSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRMjVETEd0Q1FVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVMEZEY0VVN096dGxRVVZYTEhOQ1FVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVWM3UVVGRGNFSXNaMEpCUVVrc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRkxFTkJRVU03UVVGRGJrZ3NaMEpCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU0xUXl4dFFrRkJUeXhEUVVGRkxFdEJRVXNzUTBGQlJTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU42UXl4blFrRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEZOQlFWTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGQk8xTkJRM2hET3pzN1pVRkZWeXh6UWtGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkhPenRCUVVWeVFpeGhRVUZETEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN08wRkJSVzVDTEdkQ1FVRkpMRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPenM3T3pzN096czdPenM3T3p0QlFXTnlSU3huUWtGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03UVVGREwwSXNaMEpCUVVzc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVjN1FVRkRha01zY1VKQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCVVN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzBGQlEzaEVMSEZDUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhQUVVGUExFZEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVONFJDeHhRa0ZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNVVUZCVVN4SFFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZEZUVRc2NVSkJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlRTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRM2hFTEhGQ1FVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVZFc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTjRSQ3h4UWtGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZUTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRGVFUXNjVUpCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUTNoRUxIRkNRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU40UkN4eFFrRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hIUVVGUkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRlRVFzY1VKQlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCVVN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzJGQlF6TkVMRTFCUVUwN1FVRkRTQ3h4UWtGQlN5eERRVUZETEVsQlFVa3NRMEZCUlR0QlFVTlNMSGRDUVVGSkxFVkJRVThzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzN1FVRkRlRUlzTWtKQlFVOHNSVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN6dEJRVU40UWl3MFFrRkJVU3hGUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxPMEZCUTNoQ0xEQkNRVUZOTEVWQlFVc3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXM3UVVGRGVFSXNkMEpCUVVrc1JVRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3p0QlFVTjRRaXgxUWtGQlJ5eEZRVUZSTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTE8wRkJRM2hDTERCQ1FVRk5MRVZCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVczdRVUZEZUVJc2MwSkJRVVVzUlVGQlV5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTenRCUVVONFFpeDNRa0ZCU1N4RlFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTzBGQlEzaENMSGRDUVVGSkxFVkJRVThzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzN2FVSkJRek5DTEVOQlFVVXNRMEZCUXp0aFFVTlFPMEZCUTBRc1owSkJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5zUXl4clFrRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPenRUUVVWNFJUczdPMlZCUjFVc2NVSkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTnNRaXh2UWtGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRemxHTEdkQ1FVRkpMRWRCUVVjc1IwRkJTU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUXpORExHVkJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMR2RDUVVGblFpeERRVUZETzBGQlEzQkRMR1ZCUVVjc1EwRkJReXhGUVVGRkxFZEJRVWNzWlVGQlpTeERRVUZET3p0QlFVVjZRaXhuUWtGQlNTeFJRVUZSTEVkQlFVY3NSMEZCUnl4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRE8wRkJReTlDTEdsQ1FVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRk8wRkJRM3BDTEc5Q1FVRkpMRVZCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdRVUZETDBJc2EwSkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVNeFFpeHJRa0ZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzVTBGQlV5eERRVUZETzBGQlEyaERMR3RDUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkROMElzYjBKQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NSMEZCUnl4blFrRkJaMElzUTBGQlF6dEJRVU4wUkN4dlFrRkJTU3hKUVVGSkxFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SlFVRkpMRWRCUTFnc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eExRVUZMTEVkQlEyWXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhKUVVGSkxFZEJRMlFzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SlFVRkpMRWRCUTJRc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVkQlEyUXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhKUVVGSkxFZEJRMlFzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRWRCUTJZc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVkQlEyUXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhKUVVGSkxFZEJRMlFzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SlFVRkpMRWRCUTJRc1JVRkJSU3hEUVVGRE8wRkJRMnBDTEd0Q1FVRkZMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVOcVJEczdRVUZGUkN4cFFrRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlEzQkRPMEZCUTBrc2IwSkJRVWtzUlVGQlJTeEhRVUZITEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRenM3UVVGRmVrSXNhMEpCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8wRkJRM1JETEhGQ1FVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRk8wRkJRM3BDTEhkQ1FVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdRVUZEZWtJc2MwSkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVNeFFpeDNRa0ZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4SFFVRkhMR2RDUVVGblFpeERRVUZETzBGQlEzWkVMSE5DUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkROVUlzZDBKQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzVFVGQlRTeEhRVU5xUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExGTkJRVk1zUjBGRGJrSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhWUVVGVkxFZEJRM0JDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1VVRkJVU3hIUVVOc1FpeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRTFCUVUwc1IwRkRhRUlzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRWRCUTJZc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVkQlEyeENMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzU1VGQlNTeEhRVU5rTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1RVRkJUU3hIUVVOb1FpeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRTFCUVUwc1IwRkRhRUlzUlVGQlJTeERRVUZETzBGQlEySXNjMEpCUVVVc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03YVVKQlEyNUZPMkZCUTBvN1FVRkRSQ3h2UWtGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY0VRc1kwRkJSU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFRRVUZUTEVkQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eFRRVUZUTEVkQlFVTXNWVUZCVlN4RFFVRkRPMU5CUXpWR096czdaVUZEUnl4alFVRkZMRU5CUVVNc1JVRkJSenRCUVVOT0xHZENRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkZMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFRRVU01UlRzN08xZEJkRTFETEV0QlFVczdiMEpCVWtzc1UwRkJVenM3Y1VKQmEwNVdMRXRCUVVzaUxDSm1hV3hsSWpvaUwwRndjR3hwWTJGMGFXOXVjeTlZUVUxUVVDOTRZVzF3Y0dacGJHVnpMMmgwWkc5amN5OXNaV0Z5YmxCSVVDOXdkV0pzYVdNdmQyVmxhMng1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMkp2WkhsekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWEc1cGJYQnZjblFnVW1WaFkzUXNJSHNnUTI5dGNHOXVaVzUwSUgwZ1puSnZiU0FuY21WaFkzUXZZV1JrYjI1ekp6dGNibHh1YVcxd2IzSjBJSHNnVW1GcGMyVmtRblYwZEc5dUlIMGdabkp2YlNBbmJXRjBaWEpwWVd3dGRXa25PMXh1WEc1cGJYQnZjblFnUm05eWJYTWdabkp2YlNBbkxpOW1iM0p0Y3ljN1hHNWNibWx0Y0c5eWRDQlVjbk1nWm5KdmJTQW5MaTkwY25Nbk8xeHVYRzVqYkdGemN5QkNiMlI1Y3lCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lod2NtOXdjeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdVZ1BTQjBhR2x6TG5CeWIzQnpMbWx1YVhSY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5Wlc1a1pYSW9LU0I3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRjltYjNKdGN5QTlJRHhHYjNKdGN5QnBibkIxZEhNOWUzUm9hWE11YzNSaGRHVXVhVzV3ZFhSRVlYUmhmU0F2UGp0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1p2Y20xeklEMGdVbVZoWTNRdVlXUmtiMjV6TG1Oc2IyNWxWMmwwYUZCeWIzQnpLRjltYjNKdGN5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTlRaV3hsWTNSbFpEb2dkR2hwY3k1emRHRjBaUzVwYzFObGJHVmpkR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFUzVmliV2wwT2lCMGFHbHpMbWhoYm1Sc1pWTjFZbTFwZEM1aWFXNWtLSFJvYVhNcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxRMmhoYm1kbE9pQjBhR2x6TG1oaGJtUnNaVU5vWVc1blpTNWlhVzVrS0hSb2FYTXBYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIwYUdWaFpITWdQU0IwYUdsekxuTjBZWFJsTG1sdWNIVjBSR0YwWVM1emJHbGpaU2d3S1R0Y2JpQWdJQ0FnSUNBZ2RHaGxZV1J6TG5CMWMyZ29leUIwWlhoME9pQW41cE9ONUwyY0p5QjlLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUm9aV0ZrSUQwZ2RHaGxZV1J6TG0xaGNDaG1kVzVqZEdsdmJpZ2dhWFJsYlN3Z2FTQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBOGRHZ2dhMlY1UFh0cGZUNTdhWFJsYlM1MFpYaDBmVHd2ZEdnK08xeHVJQ0FnSUNBZ0lDQjlLVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnBkR1Z0YzE5MGNuTWdQU0IwYUdsekxuTjBZWFJsTG5KdmQwUmhkR0V1YldGd0tHWjFibU4wYVc5dUtHbDBaVzBzSUdrcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNXBaQ0E5SUdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdQRlJ5Y3lCclpYazllMmw5SUdsMFpXMDllMmwwWlcxOUlDOCtYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJwZEdWdGN5QTlJR2wwWlcxelgzUnljeTV0WVhBb1puVnVZM1JwYjI0b2FYUmxiU3dnYVNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVbVZoWTNRdVlXUmtiMjV6TG1Oc2IyNWxWMmwwYUZCeWIzQnpLR2wwWlcwc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMU5sYkdWamRHVmtPaUIwYUdsekxuTjBZWFJsTG1selUyVnNaV04wWldRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wU1hSbGJUb2dkR2hwY3k1elpXeGxZM1JKZEdWdExtSnBibVFvZEdocGN5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbFNYUmxiVG9nZEdocGN5NWtaV3hsZEdWSmRHVnRMbUpwYm1Rb2RHaHBjeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5TENCMGFHbHpLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSjFjMlZ5TFdSbGRHRnBiRndpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0bWIzSnRjMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJblJoWW14bFJHbDJYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeDBZV0pzWlNCamJHRnpjMDVoYldVOVhDSjFheTEwWVdKc1pTQjFheTEwWVdKc1pTMXpkSEpwY0dWa0lIVnJMWFJsZUhRdGJHVm1kRndpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhSb1pXRmtQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4MGNqNTdkR2hsWVdSOVBDOTBjajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2ZEdobFlXUStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkR0p2WkhrK2UybDBaVzF6ZlR3dmRHSnZaSGsrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZkR0ZpYkdVK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laWGh3YjNKMFhDSStQRkpoYVhObFpFSjFkSFJ2YmlCc1lXSmxiRDBuNWErODVZZTY1TGk2ZEdGaWJHVW5JSEJ5YVcxaGNuazllM1J5ZFdWOUlHOXVRMnhwWTJzOWUzUm9hWE11YzJGMlpTNWlhVzVrS0hSb2FYTXBmU0F2UGp3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ2xjYmlBZ0lDQjlYRzR2THlBOGNISmxQanhqYjJSbFBudEtVMDlPTG5OMGNtbHVaMmxtZVNoMGFHbHpMbk4wWVhSbExuSnZkMFJoZEdFc0lHNTFiR3dzSUNkY1hIUW5LWDA4TDJOdlpHVStQQzl3Y21VK1hHNHZMeUE4WkdsMlBqeFNZV2x6WldSQ2RYUjBiMjRnYkdGaVpXdzlKK1MvbmVXdG1PV0lzQ0JzYjJOaGJITjBiM0poWjJVbklIQnlhVzFoY25rOWUzUnlkV1Y5SUc5dVEyeHBZMnM5ZTNSb2FYTXVjMkYyWlM1aWFXNWtLSFJvYVhNcGZTQXZQand2WkdsMlBseHVJQ0FnSUhObGJHVmpkRWwwWlcwb0lHbDBaVzBzSUdWMlpXNTBJQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYMmx1Y0hWMGN5QTlJSFJvYVhNdWMzUmhkR1V1YVc1d2RYUkVZWFJoTG5Oc2FXTmxLREFwTzF4dUlDQWdJQ0FnSUNCZmFXNXdkWFJ6V3pCZExuWmhiSFZsY3lBOUlHbDBaVzB1Y0hKdmNITXVhWFJsYlM1d2NtOXFPMXh1SUNBZ0lDQWdJQ0JmYVc1d2RYUnpXekZkTG5aaGJIVmxjeUE5SUdsMFpXMHVjSEp2Y0hNdWFYUmxiUzV6ZFdKd2NtOXFPMXh1SUNBZ0lDQWdJQ0JmYVc1d2RYUnpXekpkTG5aaGJIVmxjeUE5SUdsMFpXMHVjSEp2Y0hNdWFYUmxiUzV3Y21sdmNtbDBlVHRjYmlBZ0lDQWdJQ0FnWDJsdWNIVjBjMXN6WFM1MllXeDFaWE1nUFNCcGRHVnRMbkJ5YjNCekxtbDBaVzB1ZEdWamFGOTBPMXh1SUNBZ0lDQWdJQ0JmYVc1d2RYUnpXelJkTG5aaGJIVmxjeUE5SUdsMFpXMHVjSEp2Y0hNdWFYUmxiUzV4WVY5ME8xeHVJQ0FnSUNBZ0lDQmZhVzV3ZFhSeld6VmRMblpoYkhWbGN5QTlJR2wwWlcwdWNISnZjSE11YVhSbGJTNXdkV0k3WEc0Z0lDQWdJQ0FnSUY5cGJuQjFkSE5iTmwwdWRtRnNkV1Z6SUQwZ2FYUmxiUzV3Y205d2N5NXBkR1Z0TG14bFlXUmxjanRjYmlBZ0lDQWdJQ0FnWDJsdWNIVjBjMXMzWFM1MllXeDFaWE1nUFNCcGRHVnRMbkJ5YjNCekxtbDBaVzB1Y1dFN1hHNGdJQ0FnSUNBZ0lGOXBibkIxZEhOYk9GMHVkbUZzZFdWeklEMGdhWFJsYlM1d2NtOXdjeTVwZEdWdExuQnliMlE3WEc0Z0lDQWdJQ0FnSUY5cGJuQjFkSE5iT1YwdWRtRnNkV1Z6SUQwZ2FYUmxiUzV3Y205d2N5NXBkR1Z0TG01dmRHVTdYRzRnSUNBZ0lDQWdJSFpoY2lCZmFYTlRaV3hsWTNSbFpDQTlJR2wwWlcwdWNISnZjSE11YVhSbGJTNXBaQ0E5UFQwZ2FYUmxiUzV3Y205d2N5NXBjMU5sYkdWamRHVmtJRDhnWm1Gc2MyVWdPaUJwZEdWdExuQnliM0J6TG1sMFpXMHVhV1E3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2dkSGx3Wlc5bUlGOXBjMU5sYkdWamRHVmtJRDA5UFNBbmJuVnRZbVZ5SnlBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMFJHRjBZVG9nWDJsdWNIVjBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzFObGJHVmpkR1ZrT2lCZmFYTlRaV3hsWTNSbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMU5sYkdWamRHVmtPaUJmYVhOVFpXeGxZM1JsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR1JsYkdWMFpVbDBaVzBvSUdsMFpXMHNJR1YyWlc1MElDa2dlMXh1SUNBZ0lDQWdJQ0JsZG1WdWRDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5cGRHVnRjeUE5SUhSb2FYTXVjM1JoZEdVdWNtOTNSR0YwWVR0Y2JpQWdJQ0FnSUNBZ1gybDBaVzF6TG5Od2JHbGpaU2dnYVhSbGJTNXdjbTl3Y3k1cGRHVnRMbWxrTENBeElDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2V5QnliM2RFWVhSaE9pQmZhWFJsYlhNZ2ZTazdYRzRnSUNBZ0lDQWdJSGRwYm1SdmR5NXNiMk5oYkZOMGIzSmhaMlV1Y205M1JHRjBZU0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSFJvYVhNdWMzUmhkR1V1Y205M1JHRjBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhR0Z1Wkd4bFEyaGhibWRsS0NCbExDQnBkR1Z0SUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVc1a1pYZ2dQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2dnWlM1MFlYSm5aWFF1Y0dGeVpXNTBUbTlrWlM1d1lYSmxiblJPYjJSbExtTm9hV3hrVG05a1pYTWdLUzVwYm1SbGVFOW1LQ0JsTG5SaGNtZGxkQzV3WVhKbGJuUk9iMlJsSUNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmYVc1d2RYUnpJRDBnZEdocGN5NXpkR0YwWlM1cGJuQjFkRVJoZEdFdWMyeHBZMlVvTUNrN1hHNGdJQ0FnSUNBZ0lGOXBibkIxZEhOYklHbHVaR1Y0SUYwdWRtRnNkV1Z6SUQwZ1pTNTBZWEpuWlhRdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJwYm5CMWRFUmhkR0U2SUY5cGJuQjFkSE1nZlNsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JvWVc1a2JHVlRkV0p0YVhRb0lHVXNJR1p2Y20xeklDa2dlMXh1WEc0Z0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnYkdsemRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NWpiMjUwWlc1MGN5Y3BMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KMmx1Y0hWMEp5azdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2RtRnlJR1Z5Y205eUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQXZMeUJCY25KaGVTNXdjbTkwYjNSNWNHVXVabTl5UldGamFDNWpZV3hzS0d4cGMzUXNJR1oxYm1OMGFXOXVLQ0JwZEdWdElDbDdYRzRnSUNBZ0lDQWdJQzh2SUNBZ0lDQnBaaUFvSUdsMFpXMGdLU0I3WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ2FXWWdLQ0FoYVhSbGJTNTJZV3gxWlNBcElIdGNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ1lXeGxjblFvSjFaaGJIVmxJSE5vYjNWc1pGeGNKMjRnWW1VZ1pXMXdkSGtuS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z2ZTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdLQ0FoWlhKeWIzSWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVhSbGJYTWdQU0IwYUdsekxuTjBZWFJsTG5KdmQwUmhkR0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSUdsMFpXMXpXMlp2Y20xekxuQnliM0J6TG1selUyVnNaV04wWldSZElDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxelcyWnZjbTF6TG5CeWIzQnpMbWx6VTJWc1pXTjBaV1JkTG5CeWIyb2dJQ0FnSUNBOUlHeHBjM1JiTUYwdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJYTmJabTl5YlhNdWNISnZjSE11YVhOVFpXeGxZM1JsWkYwdWMzVmljSEp2YWlBZ0lEMGdiR2x6ZEZzeFhTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRjMXRtYjNKdGN5NXdjbTl3Y3k1cGMxTmxiR1ZqZEdWa1hTNXdjbWx2Y21sMGVTQWdQU0JzYVhOMFd6SmRMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzF6VzJadmNtMXpMbkJ5YjNCekxtbHpVMlZzWldOMFpXUmRMblJsWTJoZmRDQWdJQ0E5SUd4cGMzUmJNMTB1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFJsYlhOYlptOXliWE11Y0hKdmNITXVhWE5UWld4bFkzUmxaRjB1Y1dGZmRDQWdJQ0FnSUQwZ2JHbHpkRnMwWFM1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdGMxdG1iM0p0Y3k1d2NtOXdjeTVwYzFObGJHVmpkR1ZrWFM1d2RXSWdJQ0FnSUNBZ1BTQnNhWE4wV3pWZExuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsMFpXMXpXMlp2Y20xekxuQnliM0J6TG1selUyVnNaV04wWldSZExteGxZV1JsY2lBZ0lDQTlJR3hwYzNSYk5sMHVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiWE5iWm05eWJYTXVjSEp2Y0hNdWFYTlRaV3hsWTNSbFpGMHVjV0VnSUNBZ0lDQWdJRDBnYkdsemRGczNYUzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0YzF0bWIzSnRjeTV3Y205d2N5NXBjMU5sYkdWamRHVmtYUzV3Y205a0lDQWdJQ0FnUFNCc2FYTjBXemhkTG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxelcyWnZjbTF6TG5CeWIzQnpMbWx6VTJWc1pXTjBaV1JkTG01dmRHVWdJQ0FnSUNBOUlHeHBjM1JiT1YwdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzF6TG5CMWMyZ29JSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZhaUFnSUNBZ09pQnNhWE4wV3pCZExuWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV0p3Y205cUlDQTZJR3hwYzNSYk1WMHVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YVc5eWFYUjVJRG9nYkdsemRGc3lYUzUyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWamFGOTBJQ0FnT2lCc2FYTjBXek5kTG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeFlWOTBJQ0FnSUNBNklHeHBjM1JiTkYwdWRtRnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQjFZaUFnSUNBZ0lEb2diR2x6ZEZzMVhTNTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1ZoWkdWeUlDQWdPaUJzYVhOMFd6WmRMblpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4WVNBZ0lDQWdJQ0E2SUd4cGMzUmJOMTB1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIyUWdJQ0FnSURvZ2JHbHpkRnM0WFM1MllXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOTBaU0FnSUNBZ09pQnNhWE4wV3psZExuWmhiSFZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lISnZkMFJoZEdFNklHbDBaVzF6SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbXh2WTJGc1UzUnZjbUZuWlM1eWIzZEVZWFJoSUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZEdocGN5NXpkR0YwWlM1eWIzZEVZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdmVnh1SUNBZ0lIMWNibHh1WEc0Z0lDQWdkR0ZpYkdWRGNtVmhkR1VvWld3c0lHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjNSaFlteGxYMk55WldGMFpXUW5LU0FtSmlCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duZEdGaWJHVmZZM0psWVhSbFpDY3BMbkpsYlc5MlpTZ3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RHSnNJQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0owWVdKc1pWd2lLVHRjYmlBZ0lDQWdJQ0FnZEdKc0xuTjBlV3hsTG1KdmNtUmxjaUE5SUNjeGNIZ2djMjlzYVdRZ0kyTmpZeWM3WEc0Z0lDQWdJQ0FnSUhSaWJDNXBaQ0E5SUZ3aWRHRmliR1ZmWTNKbFlYUmxaRndpTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIwY2w5MGFHVmhaQ0E5SUhSaWJDNXBibk5sY25SU2IzY29LVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENBeE1Ec2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHZ2dQU0IwY2w5MGFHVmhaQzVwYm5ObGNuUkRaV3hzS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUM1emRIbHNaUzV3WVdSa2FXNW5JRDBnSnpFd2NIZ25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHZ3VjM1I1YkdVdVltRmphMmR5YjNWdVpDQTlJQ2NqWmpCbU1HWXdKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9Mbk4wZVd4bExtWnZiblJYWldsbmFIUWdQU0FuWW05c1pDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JR2tnSVQwZ09TQXBJSFJvTG5OMGVXeGxMbUp2Y21SbGNsSnBaMmgwSUQwZ0p6RndlQ0J6YjJ4cFpDQWpZMk5qSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdVlXMWxJRDBnYVNBOVBUMGdNQ0EvSUNmcG9ibm5tNjRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdrZ1BUMDlJREVnUHlBbjVhMlE1THU3NVlxaEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQnBJRDA5UFNBeUlEOGdKK1M4bU9XRmlDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dhU0E5UFQwZ015QS9JQ2ZsdklEbGo1RW5JRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJwSUQwOVBTQTBJRDhnSithMWkraXZsU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nYVNBOVBUMGdOU0EvSUNma3VJcm51cjhuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdrZ1BUMDlJRFlnUHlBbjVvcUE1cHl2NUxxNkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQnBJRDA5UFNBM0lEOGdKMUZCSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCcElEMDlQU0E0SUQ4Z0orUzZwK1dUZ1NkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FTQTlQVDBnT1NBL0lDZmxwSWZtczZnblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklDY25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHZ3VZWEJ3Wlc1a1EyaHBiR1FvWkc5amRXMWxiblF1WTNKbFlYUmxWR1Y0ZEU1dlpHVW9ibUZ0WlNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCa1lYUmhMbXhsYm1kMGFEc2dLeXRwS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RISWdQU0IwWW13dWFXNXpaWEowVW05M0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUFvSUdrZ0pTQXlJRDA5UFNBd0lDa2dkSEl1YzNSNWJHVXVZbUZqYTJkeWIzVnVaQ0E5SUNjalpXVmxKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlMbk4wZVd4bExtSnZjbVJsY2xSdmNDQTlJQ2N4Y0hnZ2MyOXNhV1FnSTJOall5YzdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElERXdPeUFySzJvcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdRZ1BTQjBjaTVwYm5ObGNuUkRaV3hzS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHUXVjM1I1YkdVdWNHRmtaR2x1WnlBOUlDY3hNSEI0Snp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JR29nSVQwOUlEa2dLU0IwWkM1emRIbHNaUzVpYjNKa1pYSlNhV2RvZENBOUlDY3hjSGdnYzI5c2FXUWdJMk5qWXljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHUXVjM1I1YkdVdWJXRjRWMmxrZEdnZ1BTQW5NekF3Y0hnbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1WVcxbElEMGdhaUE5UFQwZ01DQS9JQ2R3Y205cUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQnFJRDA5UFNBeElEOGdKM04xWW5CeWIyb25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR29nUFQwOUlESWdQeUFuY0hKcGIzSnBkSGtuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdvZ1BUMDlJRE1nUHlBbmRHVmphRjkwSnlCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2FpQTlQVDBnTkNBL0lDZHhZVjkwSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCcUlEMDlQU0ExSUQ4Z0ozQjFZaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nYWlBOVBUMGdOaUEvSUNkc1pXRmtaWEluWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdvZ1BUMDlJRGNnUHlBbmNXRW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR29nUFQwOUlEZ2dQeUFuY0hKdlpDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dhaUE5UFQwZ09TQS9JQ2R1YjNSbEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQW5KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWkM1cGJtNWxja2hVVFV3Z1BTQmtZWFJoVzJsZFcyNWhiV1ZkTG5SdlUzUnlhVzVuS0NrdWNtVndiR0ZqWlNndlhGeGNYRzR2Wnl3Z0p6eGljajRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duY0hKbGRtbGxkeWNwTG1Gd2NHVnVaRU5vYVd4a0tIUmliQ2s3WEc0Z0lDQWdJQ0FnSUdWc0xuUmxlSFJEYjI1MFpXNTBJRDBnSnp4MFlXSnNaVDRuSzJSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2QwWVdKc1pWOWpjbVZoZEdWa0p5a3VhVzV1WlhKSVZFMU1LeWM4TDNSaFlteGxQaWM3WEc0Z0lDQWdmVnh1SUNBZ0lITmhkbVVvSUdVZ0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHRmliR1ZEY21WaGRHVW9JR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHlaWE4xYkhSekp5a2dMQ0IwYUdsekxuTjBZWFJsTG5KdmQwUmhkR0VwTzF4dUlDQWdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkNiMlI1Y3p0Y2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH07XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9O1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX1JlYWN0JENvbXBvbmVudCk7XG5cbnZhciBfUmFpc2VkQnV0dG9uJFRleHRGaWVsZCA9IHJlcXVpcmUoJ21hdGVyaWFsLXVpJyk7XG5cbnZhciBGb3JtcyA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIEZvcm1zKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3Jtcyk7XG5cbiAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoRm9ybXMucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEZvcm1zLCBfQ29tcG9uZW50KTtcblxuICAgIF9jcmVhdGVDbGFzcyhGb3JtcywgW3tcbiAgICAgICAga2V5OiAnaGFuZGxlU3VibWl0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZVN1Ym1pdChlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlQ2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUNoYW5nZShlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgICAgICAgICAgdmFyIGl0ZW1zX2lucHV0cyA9IHRoaXMucHJvcHMuaW5wdXRzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIChpdGVtLnR5cGUgPT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gPFRleHRGaWVsZCBtdWx0aUxpbmU9e3RydWV9IGtleT17aX0gaGludFRleHQ9e2l0ZW0udmFsdWVzfSBmbG9hdGluZ0xhYmVsVGV4dD17aXRlbS50ZXh0fSB2YWx1ZT17IGl0ZW0udmFsdWVzICB9IG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSB9IC8+XG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9SYWlzZWRCdXR0b24kVGV4dEZpZWxkLlRleHRGaWVsZCwgeyBrZXk6IGksIGhpbnRUZXh0OiBpdGVtLnZhbHVlcywgZmxvYXRpbmdMYWJlbFRleHQ6IGl0ZW0udGV4dCwgdmFsdWU6IGl0ZW0udmFsdWVzLCBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSB9KVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZm9ybScsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250ZW50cycsIG9uU3VibWl0OiB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpIH0sXG4gICAgICAgICAgICAgICAgaXRlbXNfaW5wdXRzLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLnByb3BzLmlzU2VsZWN0ZWQgPT09ICdudW1iZXInID8gX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9SYWlzZWRCdXR0b24kVGV4dEZpZWxkLlJhaXNlZEJ1dHRvbiwgeyBsYWJlbDogJ+S/ruaUuScgfSkgOiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1JhaXNlZEJ1dHRvbiRUZXh0RmllbGQuUmFpc2VkQnV0dG9uLCB7IGxhYmVsOiAn5aKe5YqgJywgc2Vjb25kYXJ5OiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBGb3Jtcztcbn0pKF9SZWFjdCRDb21wb25lbnQuQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gRm9ybXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5bWIzSnRjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPeXRDUVVOcFF5eGpRVUZqT3pzN08zTkRRVXQ0UXl4aFFVRmhPenRKUVVWa0xFdEJRVXM3UVVGRlNTeGhRVVpVTEV0QlFVc3NRMEZGU3l4TFFVRkxMRVZCUVVVN09FSkJSbXBDTEV0QlFVczdPMEZCUjBnc2JVTkJTRVlzUzBGQlN5dzJRMEZIUnl4TFFVRkxMRVZCUVVVN1MwRkRhRUk3TzJOQlNrTXNTMEZCU3pzN2FVSkJRVXdzUzBGQlN6czdaVUZOU3l4elFrRkJSU3hEUVVGRExFVkJRVWM3UVVGRFpDeG5Ra0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUTNCRE96czdaVUZGVnl4elFrRkJSU3hEUVVGRExFVkJRVWM3UVVGRFpDeG5Ra0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUTNCRE96czdaVUZGU3l4clFrRkJSenM3UVVGRlRDeG5Ra0ZCU1N4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJUczdPenRCUVVsd1JDeDFRa0ZCVHl4dFJVRjJRbTVDTEZOQlFWTXNTVUYxUW5GQ0xFZEJRVWNzUlVGQlJTeERRVUZETEVGQlFVTXNSVUZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUVVGQlF5eEZRVUZETEdsQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVGQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUVVGQlJ5eEZRVUZETEZGQlFWRXNSVUZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRVUZCUlN4SFFVRkhPenRwUWtGQlFUdGhRVVY2U2l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVZVTEcxQ1FVRlBPenRyUWtGQlRTeFRRVUZUTEVWQlFVTXNWVUZCVlN4RlFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1FVRkJRenRuUWtGRGNFVXNXVUZCV1R0blFrRkRZanM3TzI5Q1FVTkRMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEV0QlFVc3NVVUZCVVN4SFFVRkhMRzFGUVM5Q2NrUXNXVUZCV1N4SlFTdENkVVFzUzBGQlN5eEZRVUZETEVsQlFVa3NSMEZCUnl4SFFVRkhMRzFGUVM5Q2JrWXNXVUZCV1N4SlFTdENjVVlzUzBGQlN5eEZRVUZETEVsQlFVa3NSVUZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hCUVVGRExFZEJRVWM3YVVKQlEycElPMkZCUTBnc1EwRkJRVHRUUVVOV096czdWMEU1UWtNc1MwRkJTenR2UWtGUVN5eFRRVUZUT3p0eFFrRjNRMVlzUzBGQlN5SXNJbVpwYkdVaU9pSXZRWEJ3YkdsallYUnBiMjV6TDFoQlRWQlFMM2hoYlhCd1ptbHNaWE12YUhSa2IyTnpMMnhsWVhKdVVFaFFMM0IxWW14cFl5OTNaV1ZyYkhrdmMzSmpMMk52YlhCdmJtVnVkSE12Wm05eWJYTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY2JtbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQzloWkdSdmJuTW5PMXh1WEc1cGJYQnZjblFnZTF4dUlDQWdJRkpoYVhObFpFSjFkSFJ2Yml4Y2JpQWdJQ0JVWlhoMFJtbGxiR1JjYm4wZ1puSnZiU0FuYldGMFpYSnBZV3d0ZFdrbk8xeHVYRzVqYkdGemN5QkdiM0p0Y3lCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lod2NtOXdjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUdoaGJtUnNaVk4xWW0xcGRDZ2daU0FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NW9ZVzVrYkdWVGRXSnRhWFFvWlN3Z2RHaHBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhR0Z1Wkd4bFEyaGhibWRsS0NCbElDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1oaGJtUnNaVU5vWVc1blpTaGxMQ0IwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpXNWtaWElvS1NCN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdsMFpXMXpYMmx1Y0hWMGN5QTlJSFJvYVhNdWNISnZjSE11YVc1d2RYUnpMbTFoY0NobWRXNWpkR2x2YmlnZ2FYUmxiU3dnYVNBcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdLR2wwWlcwdWRIbHdaU0E5UFNBbmRHVjRkR0Z5WldFbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnY21WMGRYSnVJRHhVWlhoMFJtbGxiR1FnYlhWc2RHbE1hVzVsUFh0MGNuVmxmU0JyWlhrOWUybDlJR2hwYm5SVVpYaDBQWHRwZEdWdExuWmhiSFZsYzMwZ1pteHZZWFJwYm1kTVlXSmxiRlJsZUhROWUybDBaVzB1ZEdWNGRIMGdkbUZzZFdVOWV5QnBkR1Z0TG5aaGJIVmxjeUFnZlNCdmJrTm9ZVzVuWlQxN0lIUm9hWE11YUdGdVpHeGxRMmhoYm1kbExtSnBibVFvZEdocGN5a2dmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdQRlJsZUhSR2FXVnNaQ0JyWlhrOWUybDlJR2hwYm5SVVpYaDBQWHRwZEdWdExuWmhiSFZsYzMwZ1pteHZZWFJwYm1kTVlXSmxiRlJsZUhROWUybDBaVzB1ZEdWNGRIMGdkbUZzZFdVOWV5QnBkR1Z0TG5aaGJIVmxjeUFnZlNCdmJrTm9ZVzVuWlQxN0lIUm9hWE11YUdGdVpHeGxRMmhoYm1kbExtSnBibVFvZEdocGN5a2dmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZlZ4dUlDQWdJQ0FnSUNCOUxDQjBhR2x6S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1BHWnZjbTBnWTJ4aGMzTk9ZVzFsUFZ3aVkyOXVkR1Z1ZEhOY0lpQnZibE4xWW0xcGREMTdkR2hwY3k1b1lXNWtiR1ZUZFdKdGFYUXVZbWx1WkNoMGFHbHpLWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdhWFJsYlhOZmFXNXdkWFJ6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwZVhCbGIyWWdkR2hwY3k1d2NtOXdjeTVwYzFObGJHVmpkR1ZrSUQwOVBTQW5iblZ0WW1WeUp5QS9JRHhTWVdselpXUkNkWFIwYjI0Z2JHRmlaV3c5SitTL3J1YVV1U2NnTHo0Z09pQThVbUZwYzJWa1FuVjBkRzl1SUd4aFltVnNQU2Zsb3A3bGlxQW5JSE5sWTI5dVpHRnllVDE3ZEhKMVpYMGdMejRnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZabTl5YlQ1Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFWnZjbTF6TzF4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH07XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9SZWFjdCRDb21wb25lbnQgPSByZXF1aXJlKFwicmVhY3QvYWRkb25zXCIpO1xuXG52YXIgX1JlYWN0JENvbXBvbmVudDIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfUmVhY3QkQ29tcG9uZW50KTtcblxudmFyIEhlYWRlciA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIEhlYWRlcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWRlcik7XG5cbiAgICAgICAgaWYgKF9Db21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEhlYWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBfY3JlYXRlQ2xhc3MoSGVhZGVyLCBbe1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9LFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBcImgzXCIsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwicmVhY3RqcyDniYggLSDlkajmiqXnlJ/miJDlmahcIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gSGVhZGVyO1xufSkoX1JlYWN0JENvbXBvbmVudC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEhlYWRlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5QmNIQnNhV05oZEdsdmJuTXZXRUZOVUZBdmVHRnRjSEJtYVd4bGN5OW9kR1J2WTNNdmJHVmhjbTVRU0ZBdmNIVmliR2xqTDNkbFpXdHNlUzl6Y21NdlkyOXRjRzl1Wlc1MGN5OW9aV0ZrWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3SzBKQlEybERMR05CUVdNN096czdTVUZGZWtNc1RVRkJUVHRoUVVGT0xFMUJRVTA3T0VKQlFVNHNUVUZCVFRzN096czdPenRqUVVGT0xFMUJRVTA3TzJsQ1FVRk9MRTFCUVUwN08yVkJSVVlzYTBKQlFVYzdRVUZEVEN4dFFrRkJUenM3YTBKQlFVc3NVMEZCVXl4RlFVRkRMRkZCUVZFN1owSkJRekZDT3pzN08ybENRVUV3UWp0aFFVTjRRaXhEUVVGQk8xTkJRMVE3T3p0WFFVNURMRTFCUVUwN2IwSkJSa2tzVTBGQlV6czdjVUpCV1ZZc1RVRkJUU0lzSW1acGJHVWlPaUl2UVhCd2JHbGpZWFJwYjI1ekwxaEJUVkJRTDNoaGJYQndabWxzWlhNdmFIUmtiMk56TDJ4bFlYSnVVRWhRTDNCMVlteHBZeTkzWldWcmJIa3ZjM0pqTDJOdmJYQnZibVZ1ZEhNdmFHVmhaR1Z5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYRzVwYlhCdmNuUWdVbVZoWTNRc0lIc2dRMjl0Y0c5dVpXNTBJSDBnWm5KdmJTQW5jbVZoWTNRdllXUmtiMjV6Snp0Y2JseHVZMnhoYzNNZ1NHVmhaR1Z5SUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwSUh0Y2JseHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpYUdWaFpHVnlYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQThhRE0rY21WaFkzUnFjeURuaVlnZ0xTRGxrYWptaXFYbmxKL21pSkRsbWFnOEwyZ3pQbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNCOVhHNWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnU0dWaFpHVnlPMXh1SWwxOSIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9O1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9pbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfUmVhY3QkQ29tcG9uZW50ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG5cbnZhciBfUmVhY3QkQ29tcG9uZW50MiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9SZWFjdCRDb21wb25lbnQpO1xuXG52YXIgX0ZsYXRCdXR0b24gPSByZXF1aXJlKCdtYXRlcmlhbC11aScpO1xuXG52YXIgVHJzID0gKGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgZnVuY3Rpb24gVHJzKHByb3BzKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcnMpO1xuXG4gICAgICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFRycy5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICB9XG5cbiAgICBfaW5oZXJpdHMoVHJzLCBfQ29tcG9uZW50KTtcblxuICAgIF9jcmVhdGVDbGFzcyhUcnMsIFt7XG4gICAgICAgIGtleTogJ2hhbmRsZUNoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RJdGVtKHRoaXMsIGUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVEZWxldGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRGVsZXRlKGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGVsZXRlSXRlbSh0aGlzLCBlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3RyJyxcbiAgICAgICAgICAgICAgICB7IGtleTogdGhpcy5wcm9wcy5pdGVtLmlkLCBvbkNsaWNrOiB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuaXNTZWxlY3RlZCA9PT0gdGhpcy5wcm9wcy5pdGVtLmlkID8gJ3NlbGVjdGVkJyA6ICcnIH0sXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucHJvalxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0uc3VicHJvalxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucHJpb3JpdHlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ3RkJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pdGVtLnRlY2hfdFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucWFfdFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgX1JlYWN0JENvbXBvbmVudDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAndGQnLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLml0ZW0ucHViXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbS5sZWFkZXJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ3RkJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5pdGVtLnFhXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbS5wcm9kXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXRlbS5ub3RlXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfUmVhY3QkQ29tcG9uZW50MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICd0ZCcsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIF9SZWFjdCRDb21wb25lbnQyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfRmxhdEJ1dHRvbi5GbGF0QnV0dG9uLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlRGVsZXRlLmJpbmQodGhpcyksIGxhYmVsOiAn5Yig6ZmkJywgcHJpbWFyeTogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVHJzO1xufSkoX1JlYWN0JENvbXBvbmVudC5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBUcnM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5MGNuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096c3JRa0ZEYVVNc1kwRkJZenM3T3pzd1FrRkZjRUlzWVVGQllUczdTVUZGYkVNc1IwRkJSenRCUVVWTkxHRkJSbFFzUjBGQlJ5eERRVVZQTEV0QlFVc3NSVUZCUlRzNFFrRkdha0lzUjBGQlJ6czdRVUZIUkN4dFEwRklSaXhIUVVGSExEWkRRVWRMTEV0QlFVc3NSVUZCUlR0TFFVTm9RanM3WTBGS1F5eEhRVUZIT3p0cFFrRkJTQ3hIUVVGSE96dGxRVTFQTEhOQ1FVRkZMRU5CUVVNc1JVRkJSenRCUVVOa0xHZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYkVNN096dGxRVVZYTEhOQ1FVRkZMRU5CUVVNc1JVRkJSenRCUVVOa0xHZENRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYkVNN096dGxRVVZMTEd0Q1FVRkhPMEZCUTB3c2JVSkJRVkU3TzJ0Q1FVRkpMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRUZCUVVNc1JVRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFRkJRVU1zUlVGQlF5eFRRVUZUTEVWQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFdEJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTEVGQlFVVTdaMEpCUTNCS096czdiMEpCUVVzc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1R0cFFrRkJUVHRuUWtGREwwSTdPenR2UWtGQlN5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUE8ybENRVUZOTzJkQ1FVTnNRenM3TzI5Q1FVRkxMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRTdhVUpCUVUwN1owSkJRMjVET3pzN2IwSkJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUVHRwUWtGQlRUdG5Ra0ZEYWtNN096dHZRa0ZCU3l4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTzJsQ1FVRk5PMmRDUVVNdlFqczdPMjlDUVVGTExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjN2FVSkJRVTA3WjBKQlF6bENPenM3YjBKQlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRUdHBRa0ZCVFR0blFrRkRha003T3p0dlFrRkJTeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMmxDUVVGTk8yZENRVU0zUWpzN08yOUNRVUZMTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWs3YVVKQlFVMDdaMEpCUXk5Q096czdiMEpCUVVzc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1R0cFFrRkJUVHRuUWtGREwwSTdPenR2UWtGQlNTeDFSRUUxUWxBc1ZVRkJWU3hKUVRSQ1V5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVGQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVNc1NVRkJTU3hGUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVGQlFVTXNSMEZCUnp0cFFrRkJTenRoUVVOMlJpeERRVUZETzFOQlExUTdPenRYUVRWQ1F5eEhRVUZITzI5Q1FVcFBMRk5CUVZNN08zRkNRVzFEVml4SFFVRkhJaXdpWm1sc1pTSTZJaTlCY0hCc2FXTmhkR2x2Ym5NdldFRk5VRkF2ZUdGdGNIQm1hV3hsY3k5b2RHUnZZM012YkdWaGNtNVFTRkF2Y0hWaWJHbGpMM2RsWld0c2VTOXpjbU12WTI5dGNHOXVaVzUwY3k5MGNuTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY2JtbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQzloWkdSdmJuTW5PMXh1WEc1cGJYQnZjblFnZXlCR2JHRjBRblYwZEc5dUlIMGdabkp2YlNBbmJXRjBaWEpwWVd3dGRXa25PMXh1WEc1amJHRnpjeUJVY25NZ1pYaDBaVzVrY3lCRGIyMXdiMjVsYm5RZ2UxeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb2NISnZjSE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2hoYm1Sc1pVTm9ZVzVuWlNnZ1pTQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1elpXeGxZM1JKZEdWdEtIUm9hWE1zSUdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQm9ZVzVrYkdWRVpXeGxkR1VvSUdVZ0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11WkdWc1pYUmxTWFJsYlNoMGFHbHpMQ0JsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvUEhSeUlHdGxlVDE3ZEdocGN5NXdjbTl3Y3k1cGRHVnRMbWxrZlNCdmJrTnNhV05yUFh0MGFHbHpMbWhoYm1Sc1pVTm9ZVzVuWlM1aWFXNWtLSFJvYVhNcGZTQmpiR0Z6YzA1aGJXVTlleUIwYUdsekxuQnliM0J6TG1selUyVnNaV04wWldRZ1BUMDlJSFJvYVhNdWNISnZjSE11YVhSbGJTNXBaQ0EvSUNkelpXeGxZM1JsWkNjZ09pQW5KeUI5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1Y0hKdmFuMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1YzNWaWNISnZhbjA4TDNSa1BseHVJQ0FnSUNBZ0lDQWdJQ0FnUEhSa1BudDBhR2x6TG5CeWIzQnpMbWwwWlcwdWNISnBiM0pwZEhsOVBDOTBaRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeDBaRDU3ZEdocGN5NXdjbTl3Y3k1cGRHVnRMblJsWTJoZmRIMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1Y1dGZmRIMDhMM1JrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSFJrUG50MGFHbHpMbkJ5YjNCekxtbDBaVzB1Y0hWaWZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErZTNSb2FYTXVjSEp2Y0hNdWFYUmxiUzVzWldGa1pYSjlQQzkwWkQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHgwWkQ1N2RHaHBjeTV3Y205d2N5NXBkR1Z0TG5GaGZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErZTNSb2FYTXVjSEp2Y0hNdWFYUmxiUzV3Y205a2ZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErZTNSb2FYTXVjSEp2Y0hNdWFYUmxiUzV1YjNSbGZUd3ZkR1ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThkR1ErUEVac1lYUkNkWFIwYjI0Z2IyNURiR2xqYXoxN2RHaHBjeTVvWVc1a2JHVkVaV3hsZEdVdVltbHVaQ2gwYUdsektYMGdiR0ZpWld3OVhDTGxpS0RwbWFSY0lpQndjbWx0WVhKNVBYdDBjblZsZlNBdlBqd3ZkR1ErWEc0Z0lDQWdJQ0FnSUR3dmRISStLVnh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVkhKek8xeHVJbDE5Il19
