(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _injectTapEventPlugin = require('react-tap-event-plugin');

var _injectTapEventPlugin2 = _interopRequireWildcard(_injectTapEventPlugin);

var _Header = require('./components/header');

var _Header2 = _interopRequireWildcard(_Header);

var _Bodys = require('./components/bodys');

var _Bodys2 = _interopRequireWildcard(_Bodys);

_injectTapEventPlugin2['default']();

var App = (function (_Component) {
    function App(props) {
        _classCallCheck(this, App);

        _get(Object.getPrototypeOf(App.prototype), 'constructor', this).call(this, props);
        this.state = {
            initdata: {
                rowData: window.localStorage.rowData ? JSON.parse(window.localStorage.rowData) : [],
                inputData: [{
                    type: 'text',
                    values: '例：后台项目',
                    text: '项目'
                }, {
                    type: 'text',
                    values: 'A',
                    text: '子任务'
                }, {
                    type: 'text',
                    values: 'A',
                    text: '优先'
                }, {
                    type: 'text',
                    values: '7/20',
                    text: '开发'
                }, {
                    type: 'text',
                    values: '12/12',
                    text: '测试'
                }, {
                    type: 'text',
                    values: '12/12',
                    text: '上线'
                }, {
                    type: 'text',
                    values: '小a',
                    text: '技术人'
                }, {
                    type: 'text',
                    values: '小b',
                    text: 'QA'
                }, {
                    type: 'text',
                    values: '小s',
                    text: '产品'
                }, {
                    type: 'textarea',
                    values: 'delay了',
                    text: '备注'
                }]
            }
        };
    }

    _inherits(App, _Component);

    _createClass(App, [{
        key: 'render',
        value: function render() {
            return _React$Component2['default'].createElement(
                'div',
                null,
                _React$Component2['default'].createElement(_Header2['default'], null),
                _React$Component2['default'].createElement(
                    'div',
                    { className: 'bodys' },
                    _React$Component2['default'].createElement(_Bodys2['default'], { init: this.state.initdata })
                )
            );
        }
    }]);

    return App;
})(_React$Component.Component);

_React$Component2['default'].render(_React$Component2['default'].createElement(App, null), document.getElementById('root'));


},{"./components/bodys":2,"./components/header":4,"react-tap-event-plugin":"react-tap-event-plugin","react/addons":"react/addons"}],2:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _RaisedButton = require('material-ui');

var _Forms = require('./forms');

var _Forms2 = _interopRequireWildcard(_Forms);

var _Trs = require('./trs');

var _Trs2 = _interopRequireWildcard(_Trs);

var Bodys = (function (_Component) {
    function Bodys(props) {
        _classCallCheck(this, Bodys);

        _get(Object.getPrototypeOf(Bodys.prototype), 'constructor', this).call(this, props);
        this.state = this.props.init;
    }

    _inherits(Bodys, _Component);

    _createClass(Bodys, [{
        key: 'render',
        value: function render() {

            var _forms = _React$Component2['default'].createElement(_Forms2['default'], { inputs: this.state.inputData });
            var forms = _React$Component2['default'].addons.cloneWithProps(_forms, {
                isSelected: this.state.isSelected,
                handleSubmit: this.handleSubmit.bind(this),
                handleChange: this.handleChange.bind(this)
            });

            var theads = this.state.inputData.slice(0);
            theads.push({ text: '操作' });
            var thead = theads.map(function (item, i) {
                return _React$Component2['default'].createElement(
                    'th',
                    { key: i },
                    item.text
                );
            });

            var items_trs = this.state.rowData.map(function (item, i) {
                item.id = i;
                return _React$Component2['default'].createElement(_Trs2['default'], { key: i, item: item });
            });

            var items = items_trs.map(function (item, i) {
                return _React$Component2['default'].addons.cloneWithProps(item, {
                    isSelected: this.state.isSelected,
                    selectItem: this.selectItem.bind(this),
                    deleteItem: this.deleteItem.bind(this)
                });
            }, this);

            return _React$Component2['default'].createElement(
                'div',
                { className: 'user-detail' },
                forms,
                _React$Component2['default'].createElement(
                    'div',
                    { className: 'tableDiv' },
                    _React$Component2['default'].createElement(
                        'table',
                        { className: 'uk-table uk-table-striped uk-text-left' },
                        _React$Component2['default'].createElement(
                            'thead',
                            null,
                            _React$Component2['default'].createElement(
                                'tr',
                                null,
                                thead
                            )
                        ),
                        _React$Component2['default'].createElement(
                            'tbody',
                            null,
                            items
                        )
                    ),
                    _React$Component2['default'].createElement(
                        'div',
                        { className: 'export' },
                        _React$Component2['default'].createElement(_RaisedButton.RaisedButton, { label: '导出为table', primary: true, onClick: this.save.bind(this) })
                    )
                )
            );
        }
    }, {
        key: 'selectItem',

        // <pre><code>{JSON.stringify(this.state.rowData, null, '\t')}</code></pre>
        // <div><RaisedButton label='保存到 localstorage' primary={true} onClick={this.save.bind(this)} /></div>
        value: function selectItem(item, event) {
            var _inputs = this.state.inputData.slice(0);
            _inputs[0].values = item.props.item.proj;
            _inputs[1].values = item.props.item.subproj;
            _inputs[2].values = item.props.item.priority;
            _inputs[3].values = item.props.item.tech_t;
            _inputs[4].values = item.props.item.qa_t;
            _inputs[5].values = item.props.item.pub;
            _inputs[6].values = item.props.item.leader;
            _inputs[7].values = item.props.item.qa;
            _inputs[8].values = item.props.item.prod;
            _inputs[9].values = item.props.item.note;
            var _isSelected = item.props.item.id === item.props.isSelected ? false : item.props.item.id;
            if (typeof _isSelected === 'number') {
                this.setState({
                    inputData: _inputs,
                    isSelected: _isSelected
                });
            } else {
                this.setState({
                    isSelected: _isSelected
                });
            }
        }
    }, {
        key: 'deleteItem',
        value: function deleteItem(item, event) {
            event.stopPropagation();
            var _items = this.state.rowData;
            _items.splice(item.props.item.id, 1);
            this.setState({ rowData: _items });
            window.localStorage.rowData = JSON.stringify(this.state.rowData);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e, item) {
            var index = Array.prototype.slice.call(e.target.parentNode.parentNode.childNodes).indexOf(e.target.parentNode);
            var _inputs = this.state.inputData.slice(0);
            _inputs[index].values = e.target.value;
            this.setState({ inputData: _inputs });
        }
    }, {
        key: 'handleSubmit',
        value: function handleSubmit(e, forms) {

            e.preventDefault();

            var list = document.querySelector('.contents').querySelectorAll('input');

            // var error = false;

            // Array.prototype.forEach.call(list, function( item ){
            //     if ( item ) {
            //         if ( !item.value ) {
            //             alert('Value should\'n be empty');
            //             error = true;
            //         }
            //     }
            // });

            // if ( !error ) {
            var items = this.state.rowData;
            if (items[forms.props.isSelected]) {
                items[forms.props.isSelected].proj = list[0].value;
                items[forms.props.isSelected].subproj = list[1].value;
                items[forms.props.isSelected].priority = list[2].value;
                items[forms.props.isSelected].tech_t = list[3].value;
                items[forms.props.isSelected].qa_t = list[4].value;
                items[forms.props.isSelected].pub = list[5].value;
                items[forms.props.isSelected].leader = list[6].value;
                items[forms.props.isSelected].qa = list[7].value;
                items[forms.props.isSelected].prod = list[8].value;
                items[forms.props.isSelected].note = list[9].value;
            } else {
                items.push({
                    proj: list[0].value,
                    subproj: list[1].value,
                    priority: list[2].value,
                    tech_t: list[3].value,
                    qa_t: list[4].value,
                    pub: list[5].value,
                    leader: list[6].value,
                    qa: list[7].value,
                    prod: list[8].value,
                    note: list[9].value
                });
            }
            this.setState({ rowData: items });
            window.localStorage.rowData = JSON.stringify(this.state.rowData);
            // }
        }
    }, {
        key: 'tableCreate',
        value: function tableCreate(el, data) {
            document.getElementById('table_created') && document.getElementById('table_created').remove();
            var tbl = document.createElement('table');
            tbl.style.width = '70%';
            tbl.style.border = '1px solid #ccc';
            tbl.id = 'table_created';

            var tr_thead = tbl.insertRow();
            for (var i = 0; i < 10; ++i) {
                var th = tr_thead.insertCell();
                th.style.padding = '10px';
                th.style.background = '#f0f0f0';
                th.style.fontWeight = 'bold';
                if (i != 9) th.style.borderRight = '1px solid #ccc';
                var name = i === 0 ? '项目' : i === 1 ? '子任务' : i === 2 ? '优先' : i === 3 ? '开发' : i === 4 ? '测试' : i === 5 ? '上线' : i === 6 ? '技术人' : i === 7 ? 'QA' : i === 8 ? '产品' : i === 9 ? '备注' : '';
                th.appendChild(document.createTextNode(name));
            }

            for (var i = 0; i < data.length; ++i) {
                var tr = tbl.insertRow();
                // if ( i % 2 === 0 ) tr.style.background = '#eee';
                tr.style.borderTop = '1px solid #ccc';
                for (var j = 0; j < 10; ++j) {
                    var td = tr.insertCell();
                    td.style.padding = '10px';
                    if (j !== 9) td.style.borderRight = '1px solid #ccc';
                    if (j === 9) td.style.maxWidth = '300px';
                    var name = j === 0 ? 'proj' : j === 1 ? 'subproj' : j === 2 ? 'priority' : j === 3 ? 'tech_t' : j === 4 ? 'qa_t' : j === 5 ? 'pub' : j === 6 ? 'leader' : j === 7 ? 'qa' : j === 8 ? 'prod' : j === 9 ? 'note' : '';
                    td.innerHTML = data[i][name].toString().replace(/\\n/g, '<br>');
                }
            }
            document.getElementById('preview').appendChild(tbl);
            el.textContent = '<table>' + document.getElementById('table_created').innerHTML + '</table>';
        }
    }, {
        key: 'save',
        value: function save(e) {
            this.tableCreate(document.getElementById('results'), this.state.rowData);
        }
    }]);

    return Bodys;
})(_React$Component.Component);

exports['default'] = Bodys;
module.exports = exports['default'];


},{"./forms":3,"./trs":5,"material-ui":"material-ui","react/addons":"react/addons"}],3:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _RaisedButton$TextField = require('material-ui');

var Forms = (function (_Component) {
    function Forms(props) {
        _classCallCheck(this, Forms);

        _get(Object.getPrototypeOf(Forms.prototype), 'constructor', this).call(this, props);
    }

    _inherits(Forms, _Component);

    _createClass(Forms, [{
        key: 'handleSubmit',
        value: function handleSubmit(e) {
            this.props.handleSubmit(e, this);
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e) {
            this.props.handleChange(e, this);
        }
    }, {
        key: 'render',
        value: function render() {

            var items_inputs = this.props.inputs.map(function (item, i) {
                // if (item.type == 'textarea') {
                //     return <TextField multiLine={true} key={i} hintText={item.values} floatingLabelText={item.text} value={ item.values  } onChange={ this.handleChange.bind(this) } />
                // } else {
                return _React$Component2['default'].createElement(_RaisedButton$TextField.TextField, { key: i, hintText: item.values, floatingLabelText: item.text, value: item.values, onChange: this.handleChange.bind(this) })
                // }
                ;
            }, this);

            return _React$Component2['default'].createElement(
                'form',
                { className: 'contents', onSubmit: this.handleSubmit.bind(this) },
                items_inputs,
                _React$Component2['default'].createElement(
                    'div',
                    null,
                    typeof this.props.isSelected === 'number' ? _React$Component2['default'].createElement(_RaisedButton$TextField.RaisedButton, { label: '修改' }) : _React$Component2['default'].createElement(_RaisedButton$TextField.RaisedButton, { label: '增加', secondary: true })
                )
            );
        }
    }]);

    return Forms;
})(_React$Component.Component);

exports['default'] = Forms;
module.exports = exports['default'];


},{"material-ui":"material-ui","react/addons":"react/addons"}],4:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _React$Component = require("react/addons");

var _React$Component2 = _interopRequireWildcard(_React$Component);

var Header = (function (_Component) {
    function Header() {
        _classCallCheck(this, Header);

        if (_Component != null) {
            _Component.apply(this, arguments);
        }
    }

    _inherits(Header, _Component);

    _createClass(Header, [{
        key: "render",
        value: function render() {
            return _React$Component2["default"].createElement(
                "div",
                { className: "header" },
                _React$Component2["default"].createElement(
                    "h3",
                    null,
                    "reactjs 版 - 周报生成器"
                )
            );
        }
    }]);

    return Header;
})(_React$Component.Component);

exports["default"] = Header;
module.exports = exports["default"];


},{"react/addons":"react/addons"}],5:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _React$Component = require('react/addons');

var _React$Component2 = _interopRequireWildcard(_React$Component);

var _FlatButton = require('material-ui');

var Trs = (function (_Component) {
    function Trs(props) {
        _classCallCheck(this, Trs);

        _get(Object.getPrototypeOf(Trs.prototype), 'constructor', this).call(this, props);
    }

    _inherits(Trs, _Component);

    _createClass(Trs, [{
        key: 'handleChange',
        value: function handleChange(e) {
            this.props.selectItem(this, e);
        }
    }, {
        key: 'handleDelete',
        value: function handleDelete(e) {
            this.props.deleteItem(this, e);
        }
    }, {
        key: 'render',
        value: function render() {
            return _React$Component2['default'].createElement(
                'tr',
                { key: this.props.item.id, onClick: this.handleChange.bind(this), className: this.props.isSelected === this.props.item.id ? 'selected' : '' },
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.proj
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.subproj
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.priority
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.tech_t
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.qa_t
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.pub
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.leader
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.qa
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.prod
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    this.props.item.note
                ),
                _React$Component2['default'].createElement(
                    'td',
                    null,
                    _React$Component2['default'].createElement(_FlatButton.FlatButton, { onClick: this.handleDelete.bind(this), label: '删除', primary: true })
                )
            );
        }
    }]);

    return Trs;
})(_React$Component.Component);

exports['default'] = Trs;
module.exports = exports['default'];


},{"material-ui":"material-ui","react/addons":"react/addons"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
