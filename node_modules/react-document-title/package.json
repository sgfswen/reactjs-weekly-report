{
  "name": "react-document-title",
  "version": "1.0.2",
  "description": "A declarative, nested, stateful document.title for React",
  "main": "index.js",
  "peerDependencies": {
    "react": ">=0.11.0 || >=0.13.0-beta.1"
  },
  "scripts": {
    "test": "mocha",
    "lint": "jshint index.js test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gaearon/react-document-title.git"
  },
  "keywords": [
    "react",
    "component",
    "react-component",
    "document.title",
    "title",
    "jsx"
  ],
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com",
    "url": "http://github.com/gaearon"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gaearon/react-document-title/issues"
  },
  "homepage": "https://github.com/gaearon/react-document-title",
  "devDependencies": {
    "expect.js": "^0.3.1",
    "global": "^4.3.0",
    "jshint": "^2.5.6",
    "mocha": "^2.0.1",
    "react": "^0.13.0-beta.1"
  },
  "dependencies": {
    "react-side-effect": "~0.3.0"
  },
  "readme": "React Document Title\n====================\n\nProvides a declarative way to specify `document.title` in a single-page app.  \nThis component can be used on server side as well.\n\nBuilt with [React Side Effect](https://github.com/gaearon/react-side-effect).\n\n====================\n\n## Installation\n\n```\nnpm install --save react-document-title\n```\n\nDependencies: React >= 0.11.0\n\n## Features\n\n* Does not emit DOM, not even a `<noscript>`;\n* Like a normal React compoment, can use its parent's `props` and `state`;\n* Can be defined in many places throughout the application;\n* Supports arbitrary levels of nesting, so you can define app-wide and page-specific titles;\n* Works just as well with isomorphic apps.\n\n## Example\n\nAssuming you use something like [react-router](https://github.com/rackt/react-router):\n\n```javascript\nvar App = React.createClass({\n  render: function () {\n    // Use \"My Web App\" if no child overrides this\n    return (\n      <DocumentTitle title='My Web App'>\n        <this.props.activeRouteHandler />\n      </DocumentTitle>\n    );\n  }\n});\n\nvar HomePage = React.createClass({\n  render: function () {\n    // Use \"Home\" while this component is mounted\n    return (\n      <DocumentTitle title='Home'>\n        <h1>Home, sweet home.</h1>\n      </DocumentTitle>\n    );\n  }\n});\n\nvar NewArticlePage = React.createClass({\n  mixins: [LinkStateMixin],\n\n  render: function () {\n    // Update using value from state while this component is mounted\n    return (\n      <DocumentTitle title={this.state.title || 'Untitled'}>\n        <div>\n          <h1>New Article</h1>\n          <input valueLink={this.linkState('title')} />\n        </div>\n      </DocumentTitle>\n    );\n  }\n});\n```\n\n## Server Usage\n\nIf you use it on server, call `DocumentTitle.rewind()` after rendering components to string to retrieve the title given to the innermost `DocumentTitle`. You can then embed this title into HTML page template.\n\nBecause this component keeps track of mounted instances, **you have to make sure to call `rewind` on server**, or you'll get a memory leak.\n\n## But What About Meta Tags?\n\nI want to keep this project simple and [after a discussion](https://github.com/gaearon/react-document-title/issues/5) decided it to be out of scope. The good news is you can implement this yourself using the same code that powers React Document Title: [React Side Effect](https://github.com/gaearon/react-side-effect). If figure out a good API for setting `<meta>`, `<link rel='canonical'>` and similar tags in a nested fashion and use React Side Effect for that, please let me know, so I can link to your project!\n",
  "readmeFilename": "README.md",
  "_id": "react-document-title@1.0.2",
  "dist": {
    "shasum": "2b6a623984ab338b1384cf2737abd3c2a8a56dce"
  },
  "_from": "react-document-title@^1.0.2",
  "_resolved": "https://registry.npmjs.org/react-document-title/-/react-document-title-1.0.2.tgz"
}
