{
  "name": "react-side-effect",
  "version": "0.3.0",
  "description": "Create components whose prop changes map to a global side effect",
  "main": "index.js",
  "peerDependencies": {
    "react": ">=0.11.0 || >=0.13.0-beta.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gaearon/react-side-effect.git"
  },
  "keywords": [
    "react",
    "component",
    "side",
    "effect"
  ],
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com",
    "url": "http://github.com/gaearon"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gaearon/react-side-effect/issues"
  },
  "homepage": "https://github.com/gaearon/react-side-effect",
  "readme": "# React Side Effect\nCreate components whose prop changes map to a global side effect.\n\n## Installation\n\n```\nnpm install --save react-side-effect\n```\n\n## Use Cases\n\n* Setting `document.style.overflow` or background color depending on current screen;\n* Firing Flux actions using declarative API depending on current screen;\n* Some crazy stuff I haven't thought about.\n\n## How's That Different from `componentDidUpdate`?\n\nIt gathers current props across *the whole tree* before passing them to side effect. For example, this allows you to create `<BodyStyle style>` component like this:\n\n```js\n// RootComponent.js\nreturn (\n  <BodyStyle style={{ backgroundColor: 'red' }}>\n    {this.state.something ? <SomeComponent /> : <OtherComponent />}\n  </BodyStyle>\n);\n\n// SomeComponent.js\nreturn (\n  <BodyStyle style={{ backgroundColor: this.state.color }}>\n    <div>Choose color: <input valueLink={this.linkState('color')} /></div>\n  </BodyStyle>\n);\n```\n\nand let the effect handler merge `style` from different level of nesting with innermost winning:\n\n```js\nvar BodyStyle = createSideEffect(function handleChange(propsList) {\n  var style = {};\n  propsList.forEach(function (props) {\n    Object.assign(style, props.style);\n  });\n  \n  for (var key in style) {\n    document.style[key] = style[key];\n  }\n});\n```\n\n\n## API\n\n#### `createSideEffect: (onChange: Array<Props> -> (), mixin: Object?) -> ReactComponent`\n\nReturns a component that, when mounting, unmounting or receiving new props, calls `onChange` with `props` of **each mounted instance**.\nIt's up to you to `reduce` them, use innermost values, or whatever you fancy.\n\nComponent will have a static `dispose()` method to clear the stack of mounted instances.  \nWhen rendering on server, you must call it after each request.\n\nYou can use optional second `mixin` parameter to specify `propTypes`, `displayName` or `statics`. It will be mixed into the generated component.\n\n## Usage\n\nHere's how to implement [React Document Title](https://github.com/gaearon/react-document-title) (both client and server side) using React Side Effect:\n\n```js\n'use strict';\n\nvar React = require('react'),\n    createSideEffect = require('react-side-effect');\n\n/**\n * Extract title from a list of each mounted component's props.\n * We're interested in the innermost title, but for other use cases we might want to call `propList.reduce`.\n */\nfunction extractTitle(propsList) {\n  var innermostProps = propsList[propsList.length - 1];\n  if (innermostProps) {\n    return innermostProps.title;\n  }\n}\n\nvar _serverTitle = null;\n\n/**\n * Generate a component that reacts to mounting, onmounting and prop changes by updating document title.\n */\nvar DocumentTitle = createSideEffect(function handleChange(propsList) {\n  var title = extractTitle(propsList);\n\n  if (typeof document !== 'undefined') {\n    document.title = title || '';\n  } else {\n    _serverTitle = title || null;\n  }\n}, {\n  displayName: 'DocumentTitle',\n\n  propTypes: {\n    title: React.PropTypes.string.isRequired\n  },\n\n  statics: {\n    /**\n     * Peek at current title (for tests).\n     */\n    peek: function () {\n      return _serverTitle;\n    },\n\n    /**\n     * Call this on server after each request to get current title.\n     */\n    rewind: function () {\n      var title = _serverTitle;\n      this.dispose();\n      return title;\n    }\n  }\n});\n\nmodule.exports = DocumentTitle;\n```\n",
  "readmeFilename": "README.md",
  "_id": "react-side-effect@0.3.0",
  "dist": {
    "shasum": "a7479292a3070432d1b02d4b9cb106a6b2ea185d"
  },
  "_from": "react-side-effect@~0.3.0",
  "_resolved": "https://registry.npmjs.org/react-side-effect/-/react-side-effect-0.3.0.tgz"
}
